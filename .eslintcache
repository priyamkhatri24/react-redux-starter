[{"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\index.js":"1","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\serviceWorker.js":"2","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\store.js":"3","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\App\\App.js":"4","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\localStorage.js":"5","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\branding.reducer.js":"6","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\color.reducer.js":"7","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\index.js":"8","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\index.js":"9","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\index.js":"10","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\userProfile.reducer.js":"11","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\homeworkCreator.reducer.js":"12","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\tests.reducer.js":"13","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\History.js":"14","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\Routes.js":"15","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\clientUserId.reducer.js":"16","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\getURLParams.js":"17","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\Remote.js":"18","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\utilities.js":"19","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\regExp.js":"20","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\razorpay.js":"21","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\index.js":"22","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\AuthenticatedRoute.js":"23","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\branding.constants.js":"24","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\tests.constants.js":"25","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\userProfile.constants.js":"26","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\color.constants.js":"27","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\homework.constants.js":"28","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\user.constants.js":"29","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Login.js":"30","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\LiveClasses.js":"31","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Dashboard\\Dashboard.js":"32","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignIn\\SignIn.js":"33","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignUp\\SignUp.js":"34","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\AdmissionChat.js":"35","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\AdmissionForm\\AdmissionForm.js":"36","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignIn\\ForgotPassword\\ForgotPassword.js":"37","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Study Bin\\StudyBin.js":"38","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\NoticeBoard\\NoticeBoard.js":"39","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Profile\\EditProfile.js":"40","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\Fees.order.js":"41","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Profile\\Profile.js":"42","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\FinalQuestions.js":"43","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\HomeWorkCreator.js":"44","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\SavedSentTests.js":"45","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\Fees.js":"46","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\QuestionTaker.js":"47","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\CreateQuestion.js":"48","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\index.js":"49","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Login.service.js":"50","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\Jitsi.js":"51","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\bbb.js":"52","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\PreviewCkeditor.js":"53","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\CkeditorQuestion.js":"54","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\QuestionCard.js":"55","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\Pallette.js":"56","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\Timer.js":"57","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\FeesCard.js":"58","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Preloader\\Preloader.js":"59","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\PhoneNo\\PhoneNo.js":"60","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Welcome\\Welcome.js":"61","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\userProfile.action.js":"62","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\clientUserId.action.js":"63","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\tests.action.js":"64","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\homework.action.js":"65","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Tests\\Tests.js":"66","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\SelectQuestions.js":"67","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\QuestionList.js":"68","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\PreviewQuestions.js":"69","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\AddYoutube\\AddYoutube.js":"70","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\FileViewer\\FileViewer.js":"71","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\VideoPlayer\\VideoPlayer.js":"72","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\BatchesSelector\\BatchesSelector.js":"73","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\color.actions.js":"74","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\branding.action.js":"75","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Tests\\LiveTestCounter.js":"76","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\Question.js":"77","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\PageHeader\\PageHeader.js":"78","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DashboardCards\\DashboardCards.js":"79","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\ScrollableCards\\ScrollableCards.js":"80","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\DynamicForm.js":"81","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\BackButton\\BackButton.js":"82","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\OTPInput\\OTPInput.js":"83","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\ChatDots\\ChatDots.js":"84","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\FormTemplate.js":"85","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\Validation.js":"86","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\AddButton\\AddButton.js":"87","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\Enquiry\\Enquiry.js":"88","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\Enquiry\\EnquiryDetails\\EnquiryDetails.js":"89","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\EnquiryTemplate\\EnquiryTemplate.js":"90"},{"size":656,"mtime":1608544643264,"results":"91","hashOfConfig":"92"},{"size":5290,"mtime":1608544643339,"results":"93","hashOfConfig":"92"},{"size":919,"mtime":1608544643305,"results":"94","hashOfConfig":"92"},{"size":1777,"mtime":1608544642245,"results":"95","hashOfConfig":"92"},{"size":489,"mtime":1608544643300,"results":"96","hashOfConfig":"92"},{"size":853,"mtime":1608544643301,"results":"97","hashOfConfig":"92"},{"size":489,"mtime":1608544643302,"results":"98","hashOfConfig":"92"},{"size":643,"mtime":1608544643303,"results":"99","hashOfConfig":"92"},{"size":55,"mtime":1608544642568,"results":"100","hashOfConfig":"92"},{"size":146,"mtime":1608544642595,"results":"101","hashOfConfig":"92"},{"size":1264,"mtime":1608544643304,"results":"102","hashOfConfig":"92"},{"size":1317,"mtime":1608544643303,"results":"103","hashOfConfig":"92"},{"size":1477,"mtime":1608544643304,"results":"104","hashOfConfig":"92"},{"size":99,"mtime":1608544642567,"results":"105","hashOfConfig":"92"},{"size":3208,"mtime":1608544642568,"results":"106","hashOfConfig":"92"},{"size":1487,"mtime":1608544643302,"results":"107","hashOfConfig":"92"},{"size":570,"mtime":1608544642586,"results":"108","hashOfConfig":"92"},{"size":1898,"mtime":1608544642568,"results":"109","hashOfConfig":"92"},{"size":2631,"mtime":1608544642662,"results":"110","hashOfConfig":"92"},{"size":451,"mtime":1608544642634,"results":"111","hashOfConfig":"92"},{"size":2688,"mtime":1608544642616,"results":"112","hashOfConfig":"92"},{"size":227,"mtime":1608544643262,"results":"113","hashOfConfig":"92"},{"size":554,"mtime":1608544642567,"results":"114","hashOfConfig":"92"},{"size":128,"mtime":1608544643260,"results":"115","hashOfConfig":"92"},{"size":205,"mtime":1608544643262,"results":"116","hashOfConfig":"92"},{"size":194,"mtime":1608544643264,"results":"117","hashOfConfig":"92"},{"size":116,"mtime":1608544643261,"results":"118","hashOfConfig":"92"},{"size":204,"mtime":1608544643261,"results":"119","hashOfConfig":"92"},{"size":197,"mtime":1608544643263,"results":"120","hashOfConfig":"92"},{"size":6213,"mtime":1608544642489,"results":"121","hashOfConfig":"92"},{"size":20563,"mtime":1608544642476,"results":"122","hashOfConfig":"92"},{"size":16362,"mtime":1608544642415,"results":"123","hashOfConfig":"92"},{"size":7900,"mtime":1608544642549,"results":"124","hashOfConfig":"92"},{"size":4177,"mtime":1608544642550,"results":"125","hashOfConfig":"92"},{"size":1232,"mtime":1608544642478,"results":"126","hashOfConfig":"92"},{"size":7848,"mtime":1608544642479,"results":"127","hashOfConfig":"92"},{"size":2741,"mtime":1608544642548,"results":"128","hashOfConfig":"92"},{"size":11952,"mtime":1608544642564,"results":"129","hashOfConfig":"92"},{"size":16618,"mtime":1608544642553,"results":"130","hashOfConfig":"92"},{"size":1879,"mtime":1608544642563,"results":"131","hashOfConfig":"92"},{"size":2885,"mtime":1608544642434,"results":"132","hashOfConfig":"92"},{"size":6222,"mtime":1608544642563,"results":"133","hashOfConfig":"92"},{"size":143,"mtime":1608544642453,"results":"134","hashOfConfig":"92"},{"size":4581,"mtime":1608544642454,"results":"135","hashOfConfig":"92"},{"size":5878,"mtime":1608544642469,"results":"136","hashOfConfig":"92"},{"size":9820,"mtime":1608544642433,"results":"137","hashOfConfig":"92"},{"size":11926,"mtime":1608544642381,"results":"138","hashOfConfig":"92"},{"size":1919,"mtime":1608544642453,"results":"139","hashOfConfig":"92"},{"size":486,"mtime":1608544642415,"results":"140","hashOfConfig":"92"},{"size":809,"mtime":1608544642490,"results":"141","hashOfConfig":"92"},{"size":3800,"mtime":1608544642476,"results":"142","hashOfConfig":"92"},{"size":2458,"mtime":1608544642477,"results":"143","hashOfConfig":"92"},{"size":135,"mtime":1608544642467,"results":"144","hashOfConfig":"92"},{"size":3570,"mtime":1608544642452,"results":"145","hashOfConfig":"92"},{"size":11762,"mtime":1608544642381,"results":"146","hashOfConfig":"92"},{"size":5598,"mtime":1608544642381,"results":"147","hashOfConfig":"92"},{"size":2526,"mtime":1608544642382,"results":"148","hashOfConfig":"92"},{"size":2471,"mtime":1608544642440,"results":"149","hashOfConfig":"92"},{"size":853,"mtime":1608544642509,"results":"150","hashOfConfig":"92"},{"size":6075,"mtime":1608544642508,"results":"151","hashOfConfig":"92"},{"size":12268,"mtime":1608544642552,"results":"152","hashOfConfig":"92"},{"size":1097,"mtime":1608544643299,"results":"153","hashOfConfig":"92"},{"size":820,"mtime":1608544643297,"results":"154","hashOfConfig":"92"},{"size":813,"mtime":1608544643298,"results":"155","hashOfConfig":"92"},{"size":730,"mtime":1608544643297,"results":"156","hashOfConfig":"92"},{"size":12693,"mtime":1608544642566,"results":"157","hashOfConfig":"92"},{"size":10183,"mtime":1608544642469,"results":"158","hashOfConfig":"92"},{"size":3605,"mtime":1608544642468,"results":"159","hashOfConfig":"92"},{"size":2673,"mtime":1608544642467,"results":"160","hashOfConfig":"92"},{"size":4342,"mtime":1608544642264,"results":"161","hashOfConfig":"92"},{"size":1434,"mtime":1608544642357,"results":"162","hashOfConfig":"92"},{"size":13727,"mtime":1608544642414,"results":"163","hashOfConfig":"92"},{"size":2528,"mtime":1608544642287,"results":"164","hashOfConfig":"92"},{"size":264,"mtime":1608544643297,"results":"165","hashOfConfig":"92"},{"size":372,"mtime":1608544643284,"results":"166","hashOfConfig":"92"},{"size":2874,"mtime":1608544642565,"results":"167","hashOfConfig":"92"},{"size":3501,"mtime":1608544642468,"results":"168","hashOfConfig":"92"},{"size":2254,"mtime":1608544642380,"results":"169","hashOfConfig":"92"},{"size":2310,"mtime":1608544642329,"results":"170","hashOfConfig":"92"},{"size":1645,"mtime":1608544642403,"results":"171","hashOfConfig":"92"},{"size":516,"mtime":1608544642330,"results":"172","hashOfConfig":"92"},{"size":319,"mtime":1608544642286,"results":"173","hashOfConfig":"92"},{"size":2315,"mtime":1608544642379,"results":"174","hashOfConfig":"92"},{"size":449,"mtime":1608544642298,"results":"175","hashOfConfig":"92"},{"size":5985,"mtime":1608544642339,"results":"176","hashOfConfig":"92"},{"size":285,"mtime":1608544642357,"results":"177","hashOfConfig":"92"},{"size":2961,"mtime":1608544642247,"results":"178","hashOfConfig":"92"},{"size":6306,"mtime":1608544642484,"results":"179","hashOfConfig":"92"},{"size":6797,"mtime":1608544642486,"results":"180","hashOfConfig":"92"},{"size":6720,"mtime":1608544642488,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p8bn22",{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"186"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"186"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"186"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"186"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"186"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"186"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"186"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"186"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"186"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"186"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"186"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"186"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"186"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"186"},"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\serviceWorker.js",[],["377","378","379","380","381","382","383","384"],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\store.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\App\\App.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\localStorage.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\branding.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\color.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\userProfile.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\homeworkCreator.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\tests.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\History.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\Routes.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\reducers\\clientUserId.reducer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\getURLParams.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\Remote.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\utilities.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\regExp.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Utilities\\razorpay.js",["385","386"],"function loadScript(src) {\r\n  return new Promise((resolve) => {\r\n    const script = document.createElement('script');\r\n    script.src = src;\r\n    script.onload = () => {\r\n      resolve(true);\r\n    };\r\n    script.onerror = () => {\r\n      resolve(false);\r\n    };\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n\r\nexport async function displayRazorpay(\r\n  orderId,\r\n  amount,\r\n  currency,\r\n  brandImage,\r\n  brandColor,\r\n  brandName,\r\n  brandAddress,\r\n  brandContact,\r\n  razorSuccess,\r\n  userFeeId,\r\n  clientId,\r\n) {\r\n  const res = await loadScript('https://checkout.razorpay.com/v1/checkout.js');\r\n\r\n  if (!res) {\r\n    alert('Razorpay SDK failed to load. Are you online?');\r\n    return;\r\n  }\r\n\r\n  // // creating a new order\r\n  // const result = await axios.post('http://localhost:5000/payment/orders');\r\n\r\n  // if (!result) {\r\n  //   alert('Server error. Are you online?');\r\n  //   return;\r\n  // }\r\n\r\n  // // Getting the order details back\r\n  // const { amount, id: order_id, currency } = result.data;\r\n\r\n  const options = {\r\n    key: process.env.REACT_APP_RAZORPAY_TEST_KEY_ID, // Enter the Key ID generated from the Dashboard\r\n    amount: amount.toString(),\r\n    currency,\r\n    name: brandName,\r\n    description: 'Test Transaction',\r\n    image: brandImage,\r\n    order_id: orderId,\r\n    async handler(response) {\r\n      const data = {\r\n        orderCreationId: orderId,\r\n        razorpayPaymentId: response.razorpay_payment_id,\r\n        razorpayOrderId: response.razorpay_order_id,\r\n        razorpaySignature: response.razorpay_signature,\r\n      };\r\n\r\n      console.log(response, data);\r\n\r\n      if (response) {\r\n        razorSuccess({\r\n          user_fee_id: userFeeId,\r\n          client_id: clientId,\r\n          order_id: orderId,\r\n        });\r\n      }\r\n\r\n      // const result = await axios.post('http://localhost:5000/payment/success', data);\r\n\r\n      // alert(result.data.msg);\r\n    },\r\n    // handler: razorSuccess({\r\n    //   user_fee_id: userFeeId,\r\n    //   client_id: clientId,\r\n    //   order_id: orderId,\r\n    // }),\r\n\r\n    prefill: {\r\n      name: brandName,\r\n      email: 'sidhant.d@ingeniumedu.com',\r\n      contact: brandContact,\r\n    },\r\n    notes: {\r\n      address: brandAddress,\r\n    },\r\n    theme: {\r\n      color: brandColor,\r\n    },\r\n  };\r\n\r\n  const paymentObject = new window.Razorpay(options);\r\n  paymentObject.on('payment.failed', (response) => {\r\n    alert(`${response.error.code}:- ${response.error.description} due to ${response.error.reason}`);\r\n    //    alert(response.error.source);\r\n    //    alert(response.error.step);\r\n    // alert(response.error.metadata.order_id);\r\n    // alert(response.error.metadata.payment_id);\r\n  });\r\n  paymentObject.open();\r\n}\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Routing\\AuthenticatedRoute.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\branding.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\tests.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\userProfile.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\color.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\homework.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\constants\\user.constants.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Login.js",["387"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport './Login.scss';\r\nimport Preloader from './Preloader/Preloader';\r\nimport footerIngenium from '../../assets/images/ingiLOGO.png';\r\nimport PhoneNo from './PhoneNo/PhoneNo';\r\nimport {\r\n  post,\r\n  get,\r\n  apiValidation,\r\n  setGlobalColors,\r\n  changeFaviconAndDocumentTitle,\r\n} from '../../Utilities';\r\nimport {\r\n  getCurrentBranding,\r\n  getBrandingError,\r\n  getBrandingPending,\r\n} from '../../redux/reducers/branding.reducer';\r\nimport { getBranding, getColor } from './Login.service';\r\nimport Welcome from './Welcome/Welcome';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentComponent: 'Preloader',\r\n      image: null,\r\n      welcomeData: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const domain = { domain_name: 'ingenium.surge.sh' }; // { domain_name: window.location.hostname };\r\n    const { fetchBranding } = this.props;\r\n    fetchBranding(domain);\r\n  }\r\n\r\n  componentDidUpdate(prevprops) {\r\n    const {\r\n      currentbranding: {\r\n        pending,\r\n        branding: {\r\n          client_logo: image,\r\n          client_id: clientId,\r\n          client_color: clientColor,\r\n          client_icon: clientIcon,\r\n          client_title: clientTitle,\r\n        },\r\n      },\r\n    } = this.props;\r\n\r\n    if (prevprops.currentbranding.pending !== pending && pending === false) {\r\n      this.setState({ image });\r\n\r\n      this.setClientColors(clientColor);\r\n\r\n      changeFaviconAndDocumentTitle(clientIcon, clientTitle);\r\n\r\n      const request = {\r\n        client_id: clientId,\r\n      };\r\n\r\n      setTimeout(() => {\r\n        get(request, '/getAdsForClient')\r\n          .then((res) => {\r\n            const result = apiValidation(res);\r\n\r\n            if (result.is_ad) {\r\n              this.setState({ welcomeData: result });\r\n              this.handleComponent('Welcome');\r\n            } else {\r\n              this.handleComponent('PhoneNo');\r\n            }\r\n          })\r\n          .catch(() => this.handleComponent('PhoneNo'));\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  setClientColors = (color = 'hsl(208, 96.4%, 56.7%)') => {\r\n    const { fetchColors } = this.props;\r\n\r\n    const init = color.indexOf('(');\r\n    const fin = color.indexOf(')');\r\n    const colorValues = color.substr(init + 1, fin - init - 1).split(',');\r\n    const lightSaturation = (parseFloat(colorValues[1]) * 0.6).toFixed(2);\r\n    const lighterSaturation = (parseFloat(colorValues[1]) * 0.3).toFixed(2);\r\n    const lightestSaturation = (parseFloat(colorValues[1]) * 0.08).toFixed(2);\r\n\r\n    const lightcolorString = `hsl(${colorValues[0]},${lightSaturation}%,${colorValues[2]})`;\r\n    const lightercolorString = `hsl(${colorValues[0]},${lighterSaturation}%,${colorValues[2]})`;\r\n    const lightestcolorString = `hsl(${colorValues[0]},${lightestSaturation}%,${colorValues[2]})`;\r\n\r\n    setGlobalColors(color, lightcolorString, lightercolorString, lightestcolorString);\r\n\r\n    const colorVariables = {\r\n      primary: color,\r\n      light: lightcolorString,\r\n      lighter: lightercolorString,\r\n      superLight: lightestcolorString,\r\n    };\r\n\r\n    fetchColors(colorVariables);\r\n  };\r\n\r\n  handleComponent = (param) => {\r\n    this.setState({ currentComponent: param });\r\n  };\r\n\r\n  getPhoneNo = (param) => {\r\n    const {\r\n      currentbranding: {\r\n        branding: { client_id: clientId },\r\n      },\r\n    } = this.props;\r\n    const requestBody = {\r\n      contact: param,\r\n      client_id: clientId,\r\n    };\r\n\r\n    post(requestBody, '/enterNumberAndLogin')\r\n      .then((res) => {\r\n        if (res.result.is_user === true) {\r\n          this.goToLoginOrSignUp('signin', requestBody.contact, res.result.user_info);\r\n        } else {\r\n          this.goToLoginOrSignUp('signup', requestBody.contact);\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  goToLoginOrSignUp(path, contact, payload = null) {\r\n    const {\r\n      history: { push },\r\n    } = this.props;\r\n    const { image } = this.state;\r\n\r\n    if (path === 'signup') {\r\n      push({\r\n        pathname: '/signup',\r\n        state: { contact },\r\n      });\r\n    } else {\r\n      push({\r\n        pathname: '/signin',\r\n        state: { userInfo: payload, image, contact },\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { currentComponent, image, welcomeData } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {currentComponent !== 'Welcome' && (\r\n          <div className='text-center Login'>\r\n            <img src={image} alt='coachingLogo' className='Login__jumbo' />\r\n\r\n            {currentComponent === 'Preloader' && <Preloader />}\r\n\r\n            {currentComponent === 'PhoneNo' && (\r\n              <PhoneNo getData={this.getPhoneNo} placeholder='Mobile number' />\r\n            )}\r\n\r\n            <footer className='py-4 Login__footer '>\r\n              <h6 className='Login__footerText'>Powered By</h6>\r\n              <img src={footerIngenium} alt='footerLogo' className='w-25' />\r\n            </footer>\r\n          </div>\r\n        )}\r\n\r\n        {currentComponent === 'Welcome' && (\r\n          <Welcome data={welcomeData} changeComponent={this.handleComponent} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  error: getBrandingError(state),\r\n  currentbranding: getCurrentBranding(state),\r\n  pending: getBrandingPending(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      fetchBranding: getBranding,\r\n      fetchColors: getColor,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n\r\nLogin.propTypes = {\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n\r\n  currentbranding: PropTypes.shape({\r\n    branding: PropTypes.shape({\r\n      client_id: PropTypes.number,\r\n      client_logo: PropTypes.string,\r\n      client_color: PropTypes.string,\r\n      client_icon: PropTypes.string,\r\n      client_title: PropTypes.string,\r\n    }),\r\n    pending: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n\r\n  fetchBranding: PropTypes.func.isRequired,\r\n  fetchColors: PropTypes.func.isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\LiveClasses.js",["388"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { connect } from 'react-redux';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport fromUnixTime from 'date-fns/fromUnixTime';\r\nimport format from 'date-fns/format';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {\r\n  getClientId,\r\n  getClientUserId,\r\n  getRoleArray,\r\n} from '../../redux/reducers/clientUserId.reducer';\r\nimport { getUserProfile } from '../../redux/reducers/userProfile.reducer';\r\nimport { get, post, apiValidation } from '../../Utilities';\r\nimport { PageHeader, BatchesSelector } from '../Common';\r\nimport Jitsi from './Jitsi';\r\nimport { createBigBlueButtonStream, rejoinBigBlueButtonStream } from './bbb';\r\nimport './LiveClasses.scss';\r\n\r\nclass LiveClasses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      batches: [],\r\n      adminBatches: [],\r\n      studentBatches: [],\r\n      selectedBatches: [],\r\n      existingStream: [],\r\n      duration: null,\r\n      showModal: false,\r\n      inputValue: '',\r\n      domain: 'tcalive.ingenimedu.com',\r\n      triggerJitsi: false,\r\n      jitsiRoomName: '',\r\n      jitsiFirstName: props.userProfile.firstName,\r\n      jitsiLastName: props.userProfile.lastName,\r\n      role: 'teacher',\r\n      doesLiveStreamExist: false,\r\n      doesBBBexist: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { clientUserId, roleArray, clientId } = this.props;\r\n\r\n    if (roleArray.includes(1) || roleArray.includes(2)) {\r\n      this.setState({ role: 'student' });\r\n      const payload = {\r\n        client_user_id: clientUserId,\r\n      };\r\n      get(payload, '/getLiveStreamsForStudent').then((res) => {\r\n        const result = apiValidation(res);\r\n\r\n        this.setState({ studentBatches: result });\r\n      });\r\n    }\r\n\r\n    if (roleArray.includes(3) || roleArray.includes(4)) {\r\n      const payload = {\r\n        client_user_id: clientUserId,\r\n      };\r\n\r\n      get(payload, '/getLiveStreamsForTeacher').then((res) => {\r\n        const result = apiValidation(res);\r\n\r\n        if (result.length) this.setState({ existingStream: result, doesLiveStreamExist: true });\r\n      });\r\n\r\n      get(payload, '/getBatchesOfTeacher')\r\n        .then((res) => {\r\n          const result = apiValidation(res);\r\n          this.setState({ batches: result });\r\n        })\r\n        .catch((e) => console.log(e));\r\n    }\r\n\r\n    if (roleArray.includes(4)) {\r\n      const payload = {\r\n        client_user_id: clientUserId,\r\n        client_id: clientId,\r\n      };\r\n\r\n      get(payload, '/getLiveStreamsForAdmin').then((res) => {\r\n        const result = apiValidation(res);\r\n        console.log(result);\r\n        this.setState({ adminBatches: result });\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { triggerJitsi, doesBBBexist } = this.state;\r\n    const { clientUserId } = this.props;\r\n    if (prevState.triggerJitsi !== triggerJitsi || doesBBBexist) {\r\n      const payload = {\r\n        client_user_id: clientUserId,\r\n      };\r\n\r\n      get(payload, '/getLiveStreamsForTeacher').then((res) => {\r\n        const result = apiValidation(res);\r\n\r\n        if (result.length)\r\n          this.setState({ existingStream: result, doesLiveStreamExist: true, doesBBBexist: false });\r\n      });\r\n    }\r\n  }\r\n\r\n  startLiveStream = (element) => {\r\n    const { domain, jitsiFirstName, jitsiLastName, role } = this.state;\r\n\r\n    if (element.stream_type === 'jitsi') {\r\n      let strippedDomain = domain;\r\n      if (element.server_url) strippedDomain = element.server_url.split('/')[2]; // eslint-disable-line\r\n      this.setState({\r\n        jitsiFirstName: element.first_name,\r\n        jitsiLastName: element.last_name,\r\n        jitsiRoomName: element.stream_link,\r\n        domain: strippedDomain,\r\n        triggerJitsi: true,\r\n      });\r\n    } else if (element.stream_type === 'big_blue_button') {\r\n      rejoinBigBlueButtonStream(\r\n        jitsiFirstName,\r\n        jitsiLastName,\r\n        element.stream_id,\r\n        element.client_user_client_user_id,\r\n        role,\r\n      );\r\n      this.setState({ doesBBBexist: true });\r\n    } else console.error('invalid stream type');\r\n  };\r\n\r\n  rejoinLiveStream = (element) => {\r\n    const { domain, jitsiFirstName, jitsiLastName } = this.state;\r\n\r\n    if (element.stream_type === 'jitsi') {\r\n      let strippedDomain = domain;\r\n      if (element.server_url) strippedDomain = element.server_url.split('/')[2]; //eslint-disable-line\r\n      this.setState({\r\n        jitsiRoomName: element.stream_link,\r\n        domain: strippedDomain,\r\n        triggerJitsi: true,\r\n      });\r\n    } else if (element.stream_type === 'big_blue_button') {\r\n      rejoinBigBlueButtonStream(\r\n        jitsiFirstName,\r\n        jitsiLastName,\r\n        element.stream_id,\r\n        element.client_user_client_user_id,\r\n      );\r\n      this.setState({ doesBBBexist: true });\r\n    } else console.error('invalid stream type');\r\n  };\r\n\r\n  deleteLiveStream = (element) => {\r\n    const payload = {\r\n      stream_id: element.stream_id,\r\n      stream_type: element.stream_type,\r\n    };\r\n\r\n    post(payload, '/deleteLiveStream')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        if (result) this.setState({ existingStream: [], doesLiveStreamExist: false });\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  handleClose = () => this.setState({ showModal: false });\r\n\r\n  getSelectedBatches = (payload) => {\r\n    const { selectedBatches } = this.state;\r\n    this.setState({ selectedBatches: payload });\r\n    const extraBatchesString = payload.length > 1 ? ` +${(payload.length - 2).toString()}` : '';\r\n    if (payload.length) {\r\n      const inputString = payload.reduce((acc, elem, index) => {\r\n        if (index < 1) {\r\n          return `${acc + elem.batch_name},`;\r\n        }\r\n        if (index === 1) {\r\n          return acc + elem.batch_name;\r\n        }\r\n        return acc;\r\n      }, '');\r\n      if (selectedBatches.length > 0)\r\n        this.setState({ inputValue: inputString + extraBatchesString });\r\n      else this.setState({ inputValue: '' });\r\n    }\r\n  };\r\n\r\n  createJitsiStream = (batches = [], duration, clientId, clientUserId) => {\r\n    const streamLink = `${Date.now()}${clientId}${clientUserId}`;\r\n\r\n    const payload = {\r\n      stream_link: streamLink,\r\n      duration,\r\n      client_user_id: clientUserId,\r\n      batch_array: batches,\r\n      client_id: clientId,\r\n    };\r\n\r\n    post(payload, '/addLiveStream')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        const jitsiDomain = result.server_url.split('/')[2];\r\n\r\n        this.setState({ domain: jitsiDomain, jitsiRoomName: streamLink, triggerJitsi: true });\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  createStream = (id) => {\r\n    console.log(id);\r\n    const { duration, selectedBatches, jitsiFirstName, jitsiLastName } = this.state;\r\n    const { clientUserId, clientId } = this.props;\r\n    const durationArray = duration.split(':');\r\n    const milliseconds =\r\n      (durationArray[0] * 3600 + durationArray[1] * 60 + durationArray[2]) * 1000;\r\n    if (Number.isNaN(Number(milliseconds))) {\r\n      alert('Please input the complete duration.');\r\n      return;\r\n    }\r\n    const batchIdArray = JSON.stringify(selectedBatches.map((elem) => elem.client_batch_id));\r\n    if (id === 'alpha')\r\n      this.createJitsiStream(batchIdArray, milliseconds.toString(), clientId, clientUserId);\r\n    else if (id === 'beta') {\r\n      createBigBlueButtonStream(\r\n        batchIdArray,\r\n        milliseconds.toString(),\r\n        clientUserId,\r\n        clientId,\r\n        jitsiFirstName,\r\n        jitsiLastName,\r\n      );\r\n      this.setState({ doesBBBexist: true });\r\n    }\r\n  };\r\n\r\n  jitsiDisplayHide = () => this.setState({ triggerJitsi: false });\r\n\r\n  // setBigBlueButtonStream = () => {\r\n  //   const { duration, jitsiFirstName, jitsiLastName } = this.state;\r\n  //   const { clientUserId, clientId } = this.props;\r\n  // };\r\n\r\n  render() {\r\n    const {\r\n      adminBatches,\r\n      batches,\r\n      inputValue,\r\n      showModal,\r\n      triggerJitsi,\r\n      domain,\r\n      jitsiFirstName,\r\n      jitsiLastName,\r\n      jitsiRoomName,\r\n      role,\r\n      selectedBatches,\r\n      duration,\r\n      doesLiveStreamExist,\r\n      existingStream,\r\n      studentBatches,\r\n    } = this.state;\r\n    return (\r\n      <div className='LiveClasses'>\r\n        <PageHeader title='Live Stream' />\r\n\r\n        {triggerJitsi && (\r\n          <Jitsi\r\n            domain={domain}\r\n            jitsiDisplayHide={this.jitsiDisplayHide}\r\n            firstName={jitsiFirstName}\r\n            lastName={jitsiLastName}\r\n            roomName={jitsiRoomName}\r\n            role={role}\r\n          />\r\n        )}\r\n        <Tabs\r\n          style={{ marginTop: '6rem' }}\r\n          defaultActiveKey='Live Classes'\r\n          className='Profile__Tabs'\r\n          justify\r\n        >\r\n          <Tab eventKey='Live Classes' title='Live Classes'>\r\n            {!triggerJitsi && role === 'student' && (\r\n              <div className='mt-4'>\r\n                {studentBatches.length ? (\r\n                  studentBatches.map((elem) => {\r\n                    return (\r\n                      <Card\r\n                        key={elem.stream_id}\r\n                        className='LiveClasses__Card mx-auto p-2 mb-3 mb-lg-5'\r\n                      >\r\n                        <div className='LiveClasses__adminCard p-2'>\r\n                          <h6 className='LiveClasses__adminHeading mb-0'>\r\n                            {elem.first_name} {elem.last_name} is streaming Live\r\n                          </h6>\r\n                          <p className='LiveClasses__adminCardTime mb-0'>\r\n                            {format(fromUnixTime(elem.created_at), 'HH:mm MMM dd, yyyy')}\r\n                          </p>\r\n\r\n                          <p className='LiveClasses__adminDuration'>\r\n                            Duration:{' '}\r\n                            <span>\r\n                              {`${Math.floor(elem.duration / 3600000)} hr ${Math.floor(\r\n                                (elem.duration % 3600) / 60,\r\n                              )} min `}\r\n                            </span>\r\n                          </p>\r\n\r\n                          <p className='LiveClasses__adminBatches'>\r\n                            Streaming In :{' '}\r\n                            {elem.batch_array.map((e, i) => {\r\n                              return (\r\n                                <span key={`elem${e}`}>\r\n                                  {e}\r\n                                  {i < elem.batch_array.length - 1 ? ',' : ''}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                          </p>\r\n                          <Row className='justify-content-center mb-2 mb-lg-4'>\r\n                            <Button\r\n                              variant='customPrimary'\r\n                              size='sm'\r\n                              onClick={() => this.startLiveStream(elem)}\r\n                            >\r\n                              Attend Live Now!\r\n                            </Button>\r\n                          </Row>\r\n                        </div>\r\n                      </Card>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <p className='text-center m-4'>\r\n                    Oops! There are no videos being streamed currently.\r\n                  </p>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {!triggerJitsi && role === 'teacher' && (\r\n              <>\r\n                {doesLiveStreamExist &&\r\n                  existingStream.map((elem) => {\r\n                    return (\r\n                      <div className='LiveClasses__adminCard p-2 m-3' key={`elem${elem.stream_id}`}>\r\n                        <h6 className='LiveClasses__adminHeading mb-0'>Ongoing Live Stream</h6>\r\n                        <p className='LiveClasses__adminCardTime mb-0'>\r\n                          {format(fromUnixTime(elem.created_at), 'HH:mm MMM dd, yyyy')}\r\n                        </p>\r\n\r\n                        <p className='LiveClasses__adminDuration'>\r\n                          Duration:{' '}\r\n                          <span>\r\n                            {`${Math.floor(elem.duration / 3600000)} hr ${Math.floor(\r\n                              (elem.duration % 3600) / 60,\r\n                            )} min `}\r\n                          </span>\r\n                        </p>\r\n\r\n                        <p className='LiveClasses__adminBatches'>\r\n                          Streaming In :{' '}\r\n                          {elem.batch_array.map((e, i) => {\r\n                            return (\r\n                              <span key={`elem${e}`}>\r\n                                {e}\r\n                                {i < elem.batch_array.length - 1 ? ',' : ''}\r\n                              </span>\r\n                            );\r\n                          })}\r\n                        </p>\r\n                        <Row className='justify-content-center mb-2 mb-lg-4'>\r\n                          <Col xs={9} className='text-center'>\r\n                            <Button\r\n                              variant='customPrimary'\r\n                              size='sm'\r\n                              onClick={() => this.rejoinLiveStream(elem)}\r\n                            >\r\n                              Rejoin\r\n                            </Button>\r\n                          </Col>\r\n                          <Col>\r\n                            <DeleteIcon onClick={() => this.deleteLiveStream(elem)} />\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    );\r\n                  })}\r\n\r\n                {!doesLiveStreamExist && (\r\n                  <>\r\n                    <Card className='LiveClasses__Card mx-auto mt-5 p-3'>\r\n                      <label htmlFor='Select Batch' className='has-float-label my-auto'>\r\n                        <input\r\n                          className='form-control'\r\n                          name='Select Batch'\r\n                          type='text'\r\n                          placeholder='Select Batch'\r\n                          onClick={() => this.setState({ showModal: true })}\r\n                          readOnly\r\n                          value={inputValue}\r\n                        />\r\n                        <span>Select Batch</span>\r\n                        <i className='LiveClasses__show'>\r\n                          <ExpandMoreIcon />\r\n                        </i>\r\n                      </label>\r\n                      <label className='has-float-label my-auto' htmlFor='Duration'>\r\n                        <input\r\n                          className='form-control mt-4'\r\n                          name='Duration'\r\n                          type='time'\r\n                          step='1'\r\n                          placeholder='Duration'\r\n                          onChange={(e) => this.setState({ duration: e.target.value })}\r\n                        />\r\n                        <span className='mt-4'>Duration</span>\r\n                      </label>\r\n                    </Card>\r\n                    <Row className='justify-content-center mt-4 mt-lg-5'>\r\n                      <Button\r\n                        variant='customPrimary'\r\n                        size='sm'\r\n                        className='mr-2 mr-lg-5'\r\n                        onClick={(e) => this.createStream(e.target.id)}\r\n                        disabled={!selectedBatches.length || !duration}\r\n                        id='alpha'\r\n                      >\r\n                        Go Live Alpha!\r\n                      </Button>\r\n                      <Button\r\n                        variant='customPrimary'\r\n                        size='sm'\r\n                        onClick={(e) => this.createStream(e.target.id)}\r\n                        disabled={!selectedBatches.length || !duration}\r\n                        id='beta'\r\n                      >\r\n                        Go Live Beta!\r\n                      </Button>\r\n                    </Row>\r\n                  </>\r\n                )}\r\n                {adminBatches.length && (\r\n                  <div className='LiveClasses__adminInfo'>\r\n                    <h6 className='text-center my-4 my-md-5 LiveClasses__adminHeading'>\r\n                      Institute&apos;s other Live Classes\r\n                    </h6>\r\n\r\n                    {adminBatches.map((elem) => {\r\n                      return (\r\n                        <Card\r\n                          key={elem.stream_id}\r\n                          className='LiveClasses__Card mx-auto p-2 mb-3 mb-lg-5'\r\n                        >\r\n                          <div className='LiveClasses__adminCard p-2'>\r\n                            <h6 className='LiveClasses__adminHeading mb-0'>\r\n                              {elem.first_name} {elem.last_name} is streaming Live\r\n                            </h6>\r\n                            <p className='LiveClasses__adminCardTime mb-0'>\r\n                              {format(fromUnixTime(elem.created_at), 'HH:mm MMM dd, yyyy')}\r\n                            </p>\r\n\r\n                            <p className='LiveClasses__adminDuration'>\r\n                              Duration:{' '}\r\n                              <span>\r\n                                {`${Math.floor(elem.duration / 3600000)} hr ${Math.floor(\r\n                                  (elem.duration % 3600) / 60,\r\n                                )} min `}\r\n                              </span>\r\n                            </p>\r\n\r\n                            <p className='LiveClasses__adminBatches'>\r\n                              Streaming In :{' '}\r\n                              {elem.batch_array.map((e, i) => {\r\n                                return (\r\n                                  <span key={`elem${e}`}>\r\n                                    {e}\r\n                                    {i < elem.batch_array.length - 1 ? ',' : ''}\r\n                                  </span>\r\n                                );\r\n                              })}\r\n                            </p>\r\n                            <Row className='justify-content-center mb-2 mb-lg-4'>\r\n                              <Button\r\n                                variant='customPrimary'\r\n                                size='sm'\r\n                                onClick={() => this.startLiveStream(elem)}\r\n                              >\r\n                                Attend Live Now!\r\n                              </Button>\r\n                            </Row>\r\n                          </div>\r\n                        </Card>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n\r\n                <Modal show={showModal} onHide={this.handleClose} centered>\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>Select Batches</Modal.Title>\r\n                  </Modal.Header>\r\n                  <BatchesSelector\r\n                    batches={batches}\r\n                    selectBatches={selectedBatches}\r\n                    getSelectedBatches={this.getSelectedBatches}\r\n                    title='Batches'\r\n                  />\r\n                  <Modal.Footer>\r\n                    <Button variant='dashboardBlueOnWhite' onClick={this.handleClose}>\r\n                      Next\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n              </>\r\n            )}\r\n          </Tab>\r\n          <Tab eventKey='Recordings' title='Recordings'>\r\n            Testing\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientId: getClientId(state),\r\n  roleArray: getRoleArray(state),\r\n  clientUserId: getClientUserId(state),\r\n  userProfile: getUserProfile(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(LiveClasses);\r\n\r\nLiveClasses.propTypes = {\r\n  clientId: PropTypes.number.isRequired,\r\n  roleArray: PropTypes.instanceOf(Array).isRequired,\r\n  clientUserId: PropTypes.number.isRequired,\r\n  userProfile: PropTypes.instanceOf(Object).isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Dashboard\\Dashboard.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignIn\\SignIn.js",["389","390","391"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport PhoneNo from '../PhoneNo/PhoneNo';\r\nimport footerIngenium from '../../../assets/images/ingiLOGO.png';\r\nimport './SignIn.scss';\r\nimport { getCurrentBranding } from '../../../redux/reducers/branding.reducer';\r\nimport { get, post, apiValidation } from '../../../Utilities';\r\nimport { clientUserIdActions } from '../../../redux/actions/clientUserId.action';\r\nimport { userProfileActions } from '../../../redux/actions/userProfile.action';\r\n\r\nconst SignIn = (props) => {\r\n  const {\r\n    location: {\r\n      state: { image, userInfo, contact },\r\n    },\r\n  } = props;\r\n\r\n  const { currentbranding: { branding: { client_id: clientId = '' } = {} } = {} } = props;\r\n\r\n  const [currentComponent, setComponent] = useState('username');\r\n  const [validUser, checkValidUser] = useState(false);\r\n  const [loginParams, setLoginParams] = useState({\r\n    user_name: '',\r\n    clientId,\r\n    user_id: 0,\r\n  });\r\n  const [userStatus, setUserStatus] = useState('');\r\n\r\n  const getUserName = (param) => {\r\n    const userParam = userInfo.filter((e) => {\r\n      return e.username === param;\r\n    });\r\n    if (userParam && userParam.length) {\r\n      setComponent('password');\r\n      setLoginParams((prevState) => {\r\n        return { ...prevState, user_name: userParam[0].username, user_id: userParam[0].user_id };\r\n      });\r\n      checkValidUser(false);\r\n      setUserStatus(userParam[0].user_status);\r\n    } else {\r\n      checkValidUser(true);\r\n    }\r\n  };\r\n\r\n  const forgotUsername = () => {\r\n    const { push } = props.history;\r\n    const requestBody = {\r\n      contact,\r\n      client_id: loginParams.clientId,\r\n    };\r\n\r\n    post(requestBody, '/forgotUsername')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        if (result.status === 'Wrong username') {\r\n          alert('Please Check your Internet Connection');\r\n          push({ pathname: '/login' });\r\n        } else if (result === 'success') {\r\n          alert('The Username Has been sent to your registered mobile number');\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const getPassword = (param) => {\r\n    if (userStatus === 'active') {\r\n      const reqBody = {\r\n        user_name: loginParams.user_name,\r\n        password: param,\r\n        client_id: loginParams.clientId,\r\n      };\r\n\r\n      get(reqBody, '/loginUser')\r\n        .then((res) => {\r\n          const { push } = props.history;\r\n          const result = apiValidation(res);\r\n          if (result.status === 'Wrong password. Login failed') {\r\n            checkValidUser(true);\r\n          }\r\n          const {\r\n            token,\r\n            user: {\r\n              client_user_id: clientUserId,\r\n              client_client_id: clientID,\r\n              contact: userContact,\r\n              first_name: firstName,\r\n              role_array: roleArray,\r\n              last_name: lastName,\r\n              user_user_id: userUserId,\r\n              user_id: userId,\r\n              profile_image: profileImage,\r\n            },\r\n          } = result;\r\n\r\n          props.setCLientUserIdToStore(clientUserId);\r\n          props.setUserIdToStore(userId);\r\n          props.setUserUserIdToStore(userUserId);\r\n          props.setRoleArrayToStore(roleArray);\r\n          props.setFirstNameToStore(firstName);\r\n          props.setLastNameToStore(lastName);\r\n          props.setProfileImageToStore(profileImage);\r\n          props.setContactToStore(userContact);\r\n          props.setTokenToStore(token);\r\n          props.setClientIdToStore(clientID);\r\n          push({ pathname: '/' });\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else if (userStatus === 'pending') {\r\n      console.log('brooo');\r\n    }\r\n  };\r\n\r\n  const forgotPassword = () => {\r\n    const { push } = props.history;\r\n    console.log(loginParams);\r\n    const requestBody = {\r\n      user_id: loginParams.user_id,\r\n      contact,\r\n    };\r\n\r\n    post(requestBody, '/resendOTP')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        if (result.status === 'sending successful') {\r\n          push({\r\n            pathname: '/forgotpassword',\r\n            state: { image, contact, userId: loginParams.user_id },\r\n          });\r\n        } else {\r\n          alert('Please Check Your Internet Connection');\r\n        }\r\n      })\r\n      .catch((e) => console.err(e));\r\n  };\r\n\r\n  return (\r\n    <div className='Signin text-center'>\r\n      <img\r\n        src={image}\r\n        alt='coachingLogo'\r\n        className='Signin__jumbo img-fluid rounded mx-auto d-block'\r\n      />\r\n\r\n      {currentComponent === 'username' && (\r\n        <PhoneNo placeholder='username' getData={getUserName} forgotPlaceholder={forgotUsername} />\r\n      )}\r\n\r\n      {currentComponent === 'password' && (\r\n        <PhoneNo\r\n          placeholder='Password'\r\n          getData={getPassword}\r\n          password\r\n          status={userStatus}\r\n          forgotPlaceholder={forgotPassword}\r\n        />\r\n      )}\r\n      {validUser && (\r\n        <small className='text-danger d-block'>\r\n          Please enter a valid\r\n          {currentComponent}\r\n        </small>\r\n      )}\r\n\r\n      <footer className='py-4 Login__footer'>\r\n        <h6 className='Login__footerText'>Powered By</h6>\r\n        <img src={footerIngenium} alt='footerLogo' className='w-25' />\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currentbranding: getCurrentBranding(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setCLientUserIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setCLientUserIdToStore(payload));\r\n    },\r\n    setClientIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setClientIdToStore(payload));\r\n    },\r\n    setUserIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setUserIdToStore(payload));\r\n    },\r\n    setUserUserIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setUserUserIdToStore(payload));\r\n    },\r\n    setRoleArrayToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setRoleArrayToStore(payload));\r\n    },\r\n    setFirstNameToStore: (payload) => {\r\n      dispatch(userProfileActions.setFirstNameToStore(payload));\r\n    },\r\n    setLastNameToStore: (payload) => {\r\n      dispatch(userProfileActions.setLastNameToStore(payload));\r\n    },\r\n    setContactToStore: (payload) => {\r\n      dispatch(userProfileActions.setContactToStore(payload));\r\n    },\r\n    setProfileImageToStore: (payload) => {\r\n      dispatch(userProfileActions.setProfileImageToStore(payload));\r\n    },\r\n    setTokenToStore: (payload) => {\r\n      dispatch(userProfileActions.setTokenToStore(payload));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\r\n\r\nSignIn.propTypes = {\r\n  location: PropTypes.shape({\r\n    state: PropTypes.shape({\r\n      image: PropTypes.string,\r\n      userInfo: PropTypes.instanceOf(Array),\r\n      contact: PropTypes.string.isRequired,\r\n    }),\r\n  }),\r\n\r\n  currentbranding: PropTypes.shape({\r\n    branding: PropTypes.shape({\r\n      client_id: PropTypes.number.isRequired,\r\n    }),\r\n  }),\r\n\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n\r\n  setCLientUserIdToStore: PropTypes.func.isRequired,\r\n  setUserIdToStore: PropTypes.func.isRequired,\r\n  setUserUserIdToStore: PropTypes.func.isRequired,\r\n  setRoleArrayToStore: PropTypes.func.isRequired,\r\n  setFirstNameToStore: PropTypes.func.isRequired,\r\n  setLastNameToStore: PropTypes.func.isRequired,\r\n  setProfileImageToStore: PropTypes.func.isRequired,\r\n  setContactToStore: PropTypes.func.isRequired,\r\n  setTokenToStore: PropTypes.func.isRequired,\r\n  setClientIdToStore: PropTypes.func.isRequired,\r\n};\r\n\r\nSignIn.defaultProps = {\r\n  location: PropTypes.shape({\r\n    state: PropTypes.shape({\r\n      image: '',\r\n    }),\r\n  }),\r\n\r\n  currentbranding: {},\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignUp\\SignUp.js",["392","393"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport { getCurrentBranding } from '../../../redux/reducers/branding.reducer';\r\nimport { post, get, apiValidation } from '../../../Utilities';\r\nimport { OTPInput } from '../../Common';\r\nimport { clientUserIdActions } from '../../../redux/actions/clientUserId.action';\r\n\r\nconst SignUp = (props) => {\r\n  const [resendText, setResendText] = useState('Resend?');\r\n\r\n  const {\r\n    location: {\r\n      state: { contact },\r\n    },\r\n    currentbranding: { branding: { client_id: clientId = '' } = {} } = {},\r\n  } = props;\r\n\r\n  const verifyOTP = (otp) => {\r\n    const requestBody = {\r\n      client_id: clientId,\r\n      phone_number: contact,\r\n      filled_otp: otp,\r\n    };\r\n    get(requestBody, '/verifyLoginOTP')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        if (result.verification_status === 'wrong otp entered') {\r\n          alert('Invalid OTP!');\r\n        } else if (result.verification_status === 'otp expired') {\r\n          alert('OTP expired');\r\n        } else if (result.verification_status === 'otp verified') {\r\n          const { user_status: userStatus, user_id: userId, client_user_id: clientUserId } = result;\r\n          props.setUserIdToStore(userId);\r\n          props.setCLientUserIdToStore(clientUserId);\r\n          const { push } = props.history;\r\n\r\n          if (userStatus === 'visitor') {\r\n            push({\r\n              pathname: '/admission',\r\n              state: { userId },\r\n            });\r\n          } else if (userStatus === 'inquiry') {\r\n            push({\r\n              pathname: '/admissionform',\r\n              state: { userId },\r\n            });\r\n          } else if (userStatus === 'admission') {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              text:\r\n                'Thank You for filling the admission form. Please wait while the institute approves your information',\r\n            }).then((response) => {\r\n              if (response.isConfirmed) {\r\n                push('/login');\r\n              }\r\n            });\r\n          }\r\n        } else if (res.success === 0) {\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'Unable to reach the server. Please check your internet connection',\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const resendOtp = () => {\r\n    const requestBody = {\r\n      client_id: clientId,\r\n      contact,\r\n    };\r\n    post(requestBody, '/resendOTPForCRM')\r\n      .then((res) => {\r\n        if (res.success === 1) {\r\n          setResendText('Sent!');\r\n        } else if (res.success === 0) {\r\n          setResendText('Resend Failed. Try again?');\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  return (\r\n    <div className='text-center'>\r\n      <OTPInput\r\n        contact={contact}\r\n        resendOtp={resendOtp}\r\n        verifyOTP={verifyOTP}\r\n        resendText={resendText}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currentbranding: getCurrentBranding(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setCLientUserIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setCLientUserIdToStore(payload));\r\n    },\r\n    setUserIdToStore: (payload) => {\r\n      dispatch(clientUserIdActions.setUserIdToStore(payload));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\r\n\r\nSignUp.propTypes = {\r\n  location: PropTypes.shape({\r\n    state: PropTypes.shape({\r\n      contact: PropTypes.string.isRequired,\r\n    }),\r\n  }).isRequired,\r\n\r\n  currentbranding: PropTypes.shape({\r\n    branding: PropTypes.shape({\r\n      client_id: PropTypes.number,\r\n    }),\r\n  }),\r\n\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n\r\n  setUserIdToStore: PropTypes.func.isRequired,\r\n  setCLientUserIdToStore: PropTypes.func.isRequired,\r\n};\r\n\r\nSignUp.defaultProps = {\r\n  currentbranding: PropTypes.shape({\r\n    branding: PropTypes.shape({\r\n      client_id: null,\r\n    }),\r\n  }),\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\AdmissionChat.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\AdmissionForm\\AdmissionForm.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\SignIn\\ForgotPassword\\ForgotPassword.js",["394"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { OTPInput } from '../../../Common';\r\nimport PhoneNo from '../../PhoneNo/PhoneNo';\r\nimport './ForgotPassword.scss';\r\nimport { get, post, apiValidation } from '../../../../Utilities';\r\n\r\nconst ForgotPassword = (props) => {\r\n  const [resendText, setResendText] = useState('Resend?');\r\n  const [currentComponent, setComponent] = useState('otp');\r\n\r\n  const {\r\n    location: {\r\n      state: { image, userId, contact },\r\n    },\r\n  } = props;\r\n\r\n  const verifyOTP = (otp) => {\r\n    const requestBody = {\r\n      user_id: userId,\r\n      phone_number: contact,\r\n      filled_otp: otp,\r\n    };\r\n    get(requestBody, '/verifyOTP')\r\n      .then((res) => {\r\n        console.log(res);\r\n        const result = apiValidation(res, 'msg');\r\n        console.log(result);\r\n        if (result.verification_status === 'wrong otp entered') {\r\n          alert('Invalid OTP!');\r\n        } else if (result.verification_status === 'otp verified') {\r\n          setComponent('createPassword');\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const resendOtp = () => {\r\n    const requestBody = {\r\n      user_id: userId,\r\n      contact,\r\n    };\r\n    post(requestBody, '/resendOTP')\r\n      .then((res) => {\r\n        if (res.success === 1) {\r\n          setResendText('Sent!');\r\n        } else if (res.success === 0) {\r\n          setResendText('Resend Failed. Try again?');\r\n        }\r\n      })\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  const resetPassword = (param) => {\r\n    console.log(param);\r\n    const requestBody = {\r\n      user_id: userId,\r\n      password: param,\r\n    };\r\n\r\n    post(requestBody, '/changePassword')\r\n      .then((res) => console.log(res)) // navigate to dashboard\r\n      .catch((e) => console.error(e));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentComponent === 'otp' && (\r\n        <OTPInput\r\n          contact={contact}\r\n          resendOtp={resendOtp}\r\n          verifyOTP={verifyOTP}\r\n          resendText={resendText}\r\n        />\r\n      )}\r\n\r\n      {currentComponent === 'createPassword' && (\r\n        <div style={{ marginTop: '150px' }}>\r\n          <img\r\n            src={image}\r\n            alt='coachingLogo'\r\n            className='Signin__jumbo img-fluid rounded mx-auto d-block'\r\n          />\r\n\r\n          <PhoneNo placeholder='Password' getData={resetPassword} password status='pending' />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n\r\nForgotPassword.propTypes = {\r\n  location: PropTypes.shape({\r\n    state: PropTypes.shape({\r\n      image: PropTypes.string.isRequired,\r\n      userId: PropTypes.number,\r\n      contact: PropTypes.string.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Study Bin\\StudyBin.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\NoticeBoard\\NoticeBoard.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Profile\\EditProfile.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\Fees.order.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Profile\\Profile.js",["395"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Button from 'react-bootstrap/Button';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport { userProfileActions } from '../../redux/actions/userProfile.action';\r\nimport { clientUserIdActions } from '../../redux/actions/clientUserId.action';\r\nimport { getUserProfile } from '../../redux/reducers/userProfile.reducer';\r\nimport { getClientId, getClientUserId } from '../../redux/reducers/clientUserId.reducer';\r\nimport { PageHeader } from '../Common';\r\nimport { get, post, apiValidation } from '../../Utilities';\r\nimport userImage from '../../assets/images/user.svg';\r\nimport './Profile.scss';\r\n\r\nconst Profile = (props) => {\r\n  const {\r\n    clientId,\r\n    clientUserId,\r\n    userProfile,\r\n    clearProfile,\r\n    history,\r\n    clearClientIdDetails,\r\n  } = props;\r\n  const [batches, setBatches] = useState([]);\r\n\r\n  const logout = () => {\r\n    const logoutPayload = {\r\n      client_user_id: clientUserId,\r\n    };\r\n    post(logoutPayload, '/logoutUser')\r\n      .then((res) => {\r\n        const result = apiValidation(res);\r\n        if (result) {\r\n          clearProfile();\r\n          clearClientIdDetails();\r\n          history.push({ pathname: '/login' });\r\n        }\r\n      })\r\n      .catch(() => alert('Logout Unsuccessful. Please check your network connection.'));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const batchPayload = {\r\n      client_id: clientId,\r\n      client_user_id: clientUserId,\r\n    };\r\n\r\n    get(batchPayload, '/getBatchInformationOfUser').then((res) => {\r\n      const result = apiValidation(res);\r\n      console.log(result);\r\n      setBatches(result.current_batch);\r\n    });\r\n  }, [clientId, clientUserId]);\r\n\r\n  const goToEditProfile = () => {\r\n    history.push('/editProfile');\r\n  };\r\n\r\n  return (\r\n    <div className='Profile'>\r\n      <PageHeader title='Profile' />\r\n      <div style={{ marginTop: '6rem' }}>\r\n        <Col className='text-center'>\r\n          <img\r\n            src={userProfile.profileImage ? userProfile.profileImage : userImage}\r\n            width='100'\r\n            height='100'\r\n            alt='profile'\r\n            className='rounded-circle'\r\n          />\r\n          <p className='Profile__mainName my-3'>{`${userProfile.firstName} ${userProfile.lastName}`}</p>\r\n        </Col>\r\n        <Tabs defaultActiveKey='Details' className='Profile__Tabs' justify>\r\n          <Tab eventKey='Details' title='Details'>\r\n            <div className='LiveClasses__adminCard p-2 m-3' style={{ position: 'relative' }}>\r\n              <div\r\n                className='Profile__edit text-center py-1'\r\n                onClick={() => goToEditProfile()}\r\n                role='button'\r\n                onKeyDown={() => goToEditProfile()}\r\n                tabIndex='-1'\r\n              >\r\n                <CreateIcon />\r\n              </div>\r\n              <h6 className='LiveClasses__adminHeading mb-0'>First Name</h6>\r\n              <p className='LiveClasses__adminDuration '>{userProfile.firstName}</p>\r\n\r\n              <h6 className='LiveClasses__adminHeading mb-0'>Mobile Number</h6>\r\n              <p className='LiveClasses__adminDuration '>{userProfile.contact}</p>\r\n\r\n              <h6 className='LiveClasses__adminHeading mb-0'>Username</h6>\r\n              <p className='LiveClasses__adminDuration '>userame aega yahan</p>\r\n\r\n              <Row className='justify-content-end mb-2 mb-lg-4 mr-2'>\r\n                <Button variant='customPrimary' size='sm' onClick={() => logout()}>\r\n                  Logout{' '}\r\n                  <span>\r\n                    <PowerSettingsNewIcon />\r\n                  </span>\r\n                </Button>\r\n              </Row>\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey='Batches' title='Batches'>\r\n            <Row className='justify-content-center'>\r\n              {batches.map((elem) => {\r\n                return (\r\n                  <Col xs={5} key={elem.client_batch_id} className='p-2 StudyBin__box my-2 mx-2'>\r\n                    <>\r\n                      <span className='Dashboard__verticalDots'>\r\n                        <MoreVertIcon />\r\n                      </span>\r\n                      <div className='m-2 text-center'>\r\n                        <img src={userImage} alt='batchpic' height='40' width='40' />\r\n                        <h6 className='text-center mt-3 Profile__batchName'>{elem.batch_name}</h6>\r\n                        <p className='Profile__batchStudents mb-0'>{elem.number_of_students}</p>\r\n                        <p className='Profile__students'>students</p>\r\n                      </div>\r\n                    </>\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          </Tab>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  clientId: getClientId(state),\r\n  clientUserId: getClientUserId(state),\r\n  userProfile: getUserProfile(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    clearClientIdDetails: () => {\r\n      dispatch(clientUserIdActions.clearClientIdDetails());\r\n    },\r\n    clearProfile: () => {\r\n      dispatch(userProfileActions.clearUserProfile());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n\r\nProfile.propTypes = {\r\n  clientId: PropTypes.number.isRequired,\r\n  clientUserId: PropTypes.number.isRequired,\r\n  userProfile: PropTypes.shape({\r\n    firstName: PropTypes.string.isRequired,\r\n    lastName: PropTypes.string,\r\n    contact: PropTypes.string.isRequired,\r\n    profileImage: PropTypes.string,\r\n  }),\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  clearProfile: PropTypes.func.isRequired,\r\n  clearClientIdDetails: PropTypes.func.isRequired,\r\n};\r\n\r\nProfile.defaultProps = {\r\n  userProfile: PropTypes.shape({\r\n    lastName: '',\r\n    profileImage: '',\r\n  }),\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\FinalQuestions.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\HomeWorkCreator.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\SavedSentTests.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\Fees.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\QuestionTaker.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\CreateQuestion.js",["396"],"import React, { useState } from 'react';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport { PageHeader } from '../Common';\r\nimport CkeditorQuestion from './CkeditorQuestion';\r\nimport PreviewCkeditor from './PreviewCkeditor';\r\n\r\nconst CreateQuestion = () => {\r\n  const [slide, setSlide] = useState(0);\r\n\r\n  const indicatorStyles = {\r\n    background: 'rgba(0, 0, 0, 0.11)',\r\n    width: '3rem',\r\n    height: '0.5rem',\r\n    display: 'inline-block',\r\n    margin: '0 8px',\r\n    borderRadius: '5px',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PageHeader title='Create Question' />\r\n      <div style={{ marginTop: '7rem' }} className='Homework__carousel'>\r\n        <Carousel\r\n          style={{ backgroundColor: 'red' }}\r\n          showArrows={false}\r\n          showThumbs={false}\r\n          autoPlay={false}\r\n          showStatus={false}\r\n          selectedItem={slide}\r\n          renderIndicator={(onClickHandler, isSelected, index, label) => {\r\n            if (isSelected) {\r\n              return (\r\n                <li\r\n                  style={{ ...indicatorStyles, background: 'var(--primary-blue)' }}\r\n                  aria-label={`Selected: ${label} ${index + 1}`}\r\n                  title={`Selected: ${label} ${index + 1}`}\r\n                />\r\n              );\r\n            }\r\n            return (\r\n              <li\r\n                style={indicatorStyles}\r\n                onClick={onClickHandler}\r\n                onKeyDown={onClickHandler}\r\n                value={index}\r\n                key={index}\r\n                role='button' // eslint-disable-line\r\n                tabIndex={0}\r\n                title={`${label} ${index + 1}`}\r\n                aria-label={`${label} ${index + 1}`}\r\n              />\r\n            );\r\n          }}\r\n        >\r\n          <CkeditorQuestion />\r\n          <PreviewCkeditor />\r\n        </Carousel>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateQuestion;\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\index.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Login.service.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\Jitsi.js",["397","398"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Jitsi = (props) => {\r\n  const jitsiContainerId = 'jitsi-container-id';\r\n\r\n  const { domain, jitsiDisplayHide, firstName, lastName, roomName, role } = props;\r\n  const [jitsi, setJitsi] = useState({});\r\n\r\n  const toolBarOptions = [\r\n    'microphone',\r\n    'camera',\r\n    'closedcaptions',\r\n    'desktop',\r\n    'fullscreen',\r\n    'fodeviceselection',\r\n    'hangup',\r\n    'profile',\r\n    'chat',\r\n    'recording',\r\n    'etherpad',\r\n    'settings',\r\n    'raisehand',\r\n    'videoquality',\r\n    'filmstrip',\r\n    'feedback',\r\n    'shortcuts',\r\n    'tileview',\r\n    'videobackgroundblur',\r\n    'download',\r\n    'help',\r\n  ];\r\n\r\n  const loadJitsiScript = () => {\r\n    let resolveLoadJitsiScriptPromise = null;\r\n\r\n    const loadJitsiScriptPromise = new Promise((resolve) => {\r\n      resolveLoadJitsiScriptPromise = resolve;\r\n    });\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://tcalive.ingeniumedu.com/external_api.js';\r\n    script.async = true;\r\n    script.onload = resolveLoadJitsiScriptPromise;\r\n    document.body.appendChild(script);\r\n\r\n    return loadJitsiScriptPromise;\r\n  };\r\n\r\n  // const initialiseJitsi = async () => {\r\n  //   if (!window.JitsiMeetExternalAPI) {\r\n  //     await loadJitsiScript();\r\n  //   }\r\n\r\n  //   const options = {\r\n  //     roomName: 'JitsiMeetAPIExamplefjhdfjhlkadfjhkjdkvkjabdlkadfjslkkbsdlkfdbvlkasjbf',\r\n  //     parentNode: document.getElementById(jitsiContainerId),\r\n  //   };\r\n\r\n  //   const jitsiWindow = new window.JitsiMeetExternalAPI(domain, options);\r\n\r\n  //   setJitsi(jitsiWindow);\r\n  // };\r\n\r\n  const initialiseJitsi = useCallback(async () => {\r\n    if (!window.JitsiMeetExternalAPI) {\r\n      await loadJitsiScript();\r\n    }\r\n\r\n    const studentOptions = {\r\n      roomName,\r\n      parentNode: document.getElementById(jitsiContainerId),\r\n      interfaceConfigOverwrite: {\r\n        TOOLBAR_BUTTONS: toolBarOptions,\r\n        SHOW_JITSI_WATERMARK: false,\r\n        JITSI_WATERMARK_LINK: '',\r\n      },\r\n      configOverwrite: { startWithAudioMuted: true, startWithVideoMuted: true },\r\n      userInfo: {\r\n        displayName: `${firstName} ${lastName}`,\r\n      },\r\n    };\r\n\r\n    const teacherOptions = {\r\n      roomName,\r\n      parentNode: document.getElementById(jitsiContainerId),\r\n      interfaceConfigOverwrite: {\r\n        TOOLBAR_BUTTONS: toolBarOptions,\r\n        SHOW_JITSI_WATERMARK: false,\r\n        JITSI_WATERMARK_LINK: '',\r\n      },\r\n      userInfo: {\r\n        displayName: `${firstName} ${lastName}`,\r\n      },\r\n    };\r\n    let jitsiWindow;\r\n    if (role === 'teacher') {\r\n      jitsiWindow = new window.JitsiMeetExternalAPI(domain, teacherOptions);\r\n    } else if (role === 'student') {\r\n      jitsiWindow = new window.JitsiMeetExternalAPI(domain, studentOptions);\r\n    }\r\n    jitsiWindow.addEventListener('videoConferenceJoined', (elem) => {\r\n      console.log('Local User Joined', elem.roomName);\r\n    });\r\n\r\n    jitsiWindow.on('readyToClose', () => {\r\n      jitsiDisplayHide();\r\n    });\r\n\r\n    setJitsi(jitsiWindow);\r\n  }, [domain, jitsiDisplayHide, roomName, toolBarOptions, firstName, lastName, role]);\r\n\r\n  useEffect(() => {\r\n    initialiseJitsi();\r\n    if (role === 'teacher') toolBarOptions.push('mute-everyone');\r\n\r\n    return () => jitsi?.dispose?.();\r\n  }, []);\r\n\r\n  return <div id={jitsiContainerId} style={{ height: '90%', width: '100%' }} />;\r\n};\r\n\r\nexport default Jitsi;\r\n\r\nJitsi.propTypes = {\r\n  domain: PropTypes.string.isRequired,\r\n  jitsiDisplayHide: PropTypes.func.isRequired,\r\n  firstName: PropTypes.string,\r\n  lastName: PropTypes.string,\r\n  roomName: PropTypes.string.isRequired,\r\n  role: PropTypes.string.isRequired,\r\n};\r\n\r\nJitsi.defaultProps = {\r\n  firstName: '',\r\n  lastName: '',\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Live Classes\\bbb.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\PreviewCkeditor.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\CkeditorQuestion.js",["399","400"],"import React, { useState, useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Select from 'react-select';\r\nimport { get, apiValidation } from '../../Utilities';\r\n\r\nconst CkeditorQuestion = () => {\r\n  const [classes, setClasses] = useState([]);\r\n  const [subjects, setSubjects] = useState([]);\r\n  const [currentClassId, setCurrentClassId] = useState(0);\r\n  const [chapters, setChapters] = useState([]);\r\n  const [type, setType] = useState('');\r\n  const [selectedChapter, setSelectedChapter] = useState('');\r\n\r\n  const aquaticCreatures = [\r\n    { label: 'Shark', value: 'Shark' },\r\n    { label: 'Dolphin', value: 'Dolphin' },\r\n    { label: 'Whale', value: 'Whale' },\r\n    { label: 'Octopus', value: 'Octopus' },\r\n    { label: 'Crab', value: 'Crab' },\r\n    { label: 'Lobster', value: 'Lobster' },\r\n  ];\r\n\r\n  const typeOfQuestion = [\r\n    { label: 'MCQ - Single Choice', value: 'MCQ' },\r\n    { label: 'MCQ - Multiple Choice', value: 'multiple' },\r\n    { label: 'Subjective', value: 'subjective' },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    get('', '/getClassesForHomeworkCreator').then((res) => {\r\n      const result = apiValidation(res);\r\n      const selectClasses = result.map((e) => {\r\n        e.label = e.class_name;\r\n        e.value = e.class_id;\r\n        return e;\r\n      });\r\n      console.log(selectClasses);\r\n      setClasses(selectClasses);\r\n      console.log(result);\r\n    });\r\n  }, []);\r\n\r\n  const setCurrentSubjects = (opt) => {\r\n    setSubjects({ label: null, value: null });\r\n    const selectSubject = opt.subject_array.map((e) => {\r\n      e.label = e.subject_name;\r\n      e.value = e.subject_id;\r\n      return e;\r\n    });\r\n\r\n    setCurrentClassId(opt.class_id);\r\n    setSubjects(selectSubject);\r\n  };\r\n\r\n  const setCurrentChapters = (opt) => {\r\n    const subjectArray = [];\r\n    subjectArray.push(opt.value);\r\n    const payload = {\r\n      class_id: currentClassId,\r\n      subject_array: JSON.stringify(subjectArray),\r\n    };\r\n\r\n    get(payload, '/getChaptersOfClassSubject').then((res) => {\r\n      const result = apiValidation(res);\r\n      const modifiedChapters = result.map((e) => {\r\n        e.value = e.chapter_id;\r\n        e.label = e.chapter_name;\r\n        return e;\r\n      });\r\n      setChapters(modifiedChapters);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card className='Homework__selectCard mb-3 mx-2'>\r\n      <Row className='m-0 justify-content-center'>\r\n        <Col xs={5} lg={3} className='my-3 mx-auto p-0'>\r\n          <Select\r\n            options={classes}\r\n            placeholder='Course'\r\n            onChange={(opt) => setCurrentSubjects(opt)}\r\n          />\r\n        </Col>\r\n        <Col xs={5} lg={3} className='my-3 mx-auto p-0'>\r\n          <Select\r\n            options={subjects}\r\n            placeholder='Subject'\r\n            onChange={(opt) => setCurrentChapters(opt)}\r\n          />\r\n        </Col>\r\n        <Col xs={5} lg={3} className='my-3 mx-auto p-0'>\r\n          <Select\r\n            options={chapters}\r\n            placeholder='Chapter'\r\n            onChange={(opt) => setSelectedChapter(opt.value)}\r\n          />\r\n        </Col>\r\n        <Col xs={5} lg={3} className='my-3 mx-auto p-0'>\r\n          <Select\r\n            options={typeOfQuestion}\r\n            placeholder='Type'\r\n            onChange={(opt) => setType(opt.value)}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      {aquaticCreatures.map((e) => (\r\n        <p style={{ marginTop: '6rem' }}>{e.label}</p>\r\n      ))}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CkeditorQuestion;\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\QuestionCard.js",["401"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport MathJax from 'react-mathjax-preview';\r\nimport { propComparator } from '../../../Utilities';\r\n\r\nclass QuestionCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: {},\r\n      timer: 0,\r\n      answer: '',\r\n      checked: [],\r\n      review: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { currentQuestion } = this.props;\r\n    if (Object.keys(currentQuestion).length > 0) {\r\n      currentQuestion.option_array.sort(propComparator('order'));\r\n\r\n      this.setState({ question: currentQuestion, timer: currentQuestion.timer });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { currentQuestion, onUnmount } = this.props;\r\n    if (prevProps.currentQuestion !== currentQuestion) {\r\n      const falseChecked = currentQuestion.option_array.map((elem) => {\r\n        return false;\r\n      });\r\n\r\n      const { timer, question, review } = this.state;\r\n      this.setState({ timer: currentQuestion.timer, checked: falseChecked, review: false });\r\n      onUnmount({\r\n        time: timer,\r\n        count: question.noOfTimesVisited + 1,\r\n        uuid: prevProps.currentQuestion.uuid,\r\n        review,\r\n      });\r\n      this.restartSectionTimer();\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.currentQuestion) {\r\n      props.currentQuestion.option_array.sort(propComparator('order'));\r\n      return {\r\n        ...state,\r\n        question: props.currentQuestion,\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.sectionTimeIntervalId);\r\n\r\n    // remove the focused if not save and next done\r\n  }\r\n\r\n  /** ********Timer logic***** */\r\n\r\n  restartSectionTimer = () => {\r\n    if (this.sectionTimeIntervalId !== 0) {\r\n      clearInterval(this.sectionTimeIntervalId);\r\n    }\r\n    this.sectionTimeIntervalId = setInterval(this.sectionTimerHandler, 1000);\r\n    this.setState({ timer: 0 });\r\n  };\r\n\r\n  sectionTimerHandler = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        timer: prevState.timer + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  /** *********** */\r\n\r\n  selectedAnswer = (e) => {\r\n    const { question } = this.state;\r\n    this.setState({ answer: e });\r\n    const focusedQuestions = question;\r\n    focusedQuestions.option_array = question.option_array.map((elem) => {\r\n      if (elem.order === Number(e)) {\r\n        elem.isFocus = true;\r\n        return elem;\r\n      }\r\n      elem.isFocus = false;\r\n      return elem;\r\n    });\r\n    this.setState({ question: focusedQuestions });\r\n  };\r\n\r\n  submitAnswer = (e) => {\r\n    const { question, answer, timer, checked } = this.state;\r\n    const { onSaveAndNext } = this.props;\r\n    console.log(question, 'yessyr');\r\n    if (e === 'Clear Response') {\r\n      if (question.question_type === 'single') {\r\n        const focusedQuestions = question;\r\n        focusedQuestions.option_array.forEach((res) => (res.isFocus = false));\r\n        console.log(focusedQuestions, 'etf');\r\n        this.setState({ question: focusedQuestions });\r\n      } else if (question.question_type === 'subjective') {\r\n        this.setState({ answer: '' });\r\n      } else if (question.question_type === 'multiple') {\r\n        const checkedFalse = checked.map(() => {\r\n          return false;\r\n        });\r\n        this.setState({ checked: checkedFalse });\r\n      }\r\n    } else if (e === 'Save And Next' || e === 'Mark For Review') {\r\n      if (e === 'Mark For Review') {\r\n        this.setState({ review: true });\r\n      }\r\n      const correctQuestion = JSON.parse(JSON.stringify(question));\r\n      correctQuestion.option_array = question.option_array.filter((elem) => {\r\n        return elem.isFocus === true;\r\n      });\r\n\r\n      if (question.question_type === 'single') {\r\n        const payload = {\r\n          isCorrect:\r\n            correctQuestion.option_array.length > 0 ? this.checkAnswer(correctQuestion) : null,\r\n          answer:\r\n            correctQuestion.option_array.length > 0 // converts order into a b c d and if empty sends null\r\n              ? correctQuestion.option_array[0].order === 1\r\n                ? '[A]'\r\n                : correctQuestion.option_array[0].order === 2\r\n                ? '[B]'\r\n                : correctQuestion.option_array[0].order === 3\r\n                ? '[C]'\r\n                : '[D]'\r\n              : null,\r\n          uuid: correctQuestion.uuid,\r\n          time: timer,\r\n        };\r\n        onSaveAndNext(payload, e);\r\n      } else if (question.question_type === 'subjective') {\r\n        const payload = {\r\n          isCorrect:\r\n            question.question_answer.toUpperCase().localeCompare(answer.toUpperCase()) === 0,\r\n          answer: answer === '' ? null : answer,\r\n          uuid: question.uuid,\r\n          time: timer,\r\n        };\r\n\r\n        onSaveAndNext(payload, e);\r\n      } else if (question.question_type === 'multiple') {\r\n        console.log('multi');\r\n        const convertToText = checked\r\n          .map((elem, index) => {\r\n            if (index === 0 && elem === true) return 'A';\r\n            if (index === 1 && elem === true) return 'B';\r\n            if (index === 2 && elem === true) return 'C';\r\n            if (index === 3 && elem === true) return 'D';\r\n            return null;\r\n          })\r\n          .filter((elem) => {\r\n            return elem !== null;\r\n          });\r\n        // .reduce((cur, acc) => {\r\n        //   return `${cur},${acc}`;\r\n        // });\r\n        const answerArray = question.question_answer\r\n          .toUpperCase()\r\n          .split('')\r\n          .filter((elem) => {\r\n            return elem !== '[' && elem !== ']' && elem !== ',';\r\n          })\r\n          .sort();\r\n\r\n        const isCorrect =\r\n          convertToText.length === answerArray.length &&\r\n          convertToText.every((value, index) => value === answerArray[index]);\r\n\r\n        console.log(convertToText, answerArray, isCorrect);\r\n        const payload = {\r\n          isCorrect,\r\n          answer: convertToText.length > 0 ? convertToText : null,\r\n          uuid: question.uuid,\r\n          time: timer,\r\n        };\r\n        onSaveAndNext(payload, e);\r\n      }\r\n    }\r\n  };\r\n\r\n  checkAnswer = (elem) => {\r\n    if (elem.question_type === 'single') {\r\n      if (elem.option_array[0].order === 1 && elem.question_answer === '[A]') return true;\r\n      if (elem.option_array[0].order === 2 && elem.question_answer === '[B]') return true;\r\n      if (elem.option_array[0].order === 3 && elem.question_answer === '[C]') return true;\r\n      if (elem.option_array[0].order === 4 && elem.question_answer === '[D]') return true;\r\n\r\n      return false;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  handleChecked(order) {\r\n    const { checked } = this.state;\r\n    const checkedArray = [...checked];\r\n    checkedArray[order - 1] = !checkedArray[order - 1];\r\n    this.setState({ checked: checkedArray });\r\n    console.log('CHANGE!');\r\n  }\r\n\r\n  render() {\r\n    const { question, answer, checked } = this.state;\r\n    return (\r\n      <>\r\n        <Card\r\n          className='mx-2 mt-4 mb-2 p-2'\r\n          style={{ boxShadow: '0px 1px 3px 0px rgba(0,0,0,0.16)', borderRadius: '10px' }}\r\n        >\r\n          <span className='ml-auto QuestionTaker__questionType my-2'>\r\n            {question.question_type === 'single'\r\n              ? 'Single Choice'\r\n              : question.question_type === 'multiple'\r\n              ? 'Multiple Choice'\r\n              : 'Subjective'}\r\n          </span>\r\n          <div className='QuestionTaker__questionHeading'>\r\n            <MathJax math={String.raw`${question.question_text}`} />\r\n          </div>\r\n          {question.question_image && (\r\n            <img src={question.question_image} alt='question' className='img-fluid m-2' />\r\n          )}\r\n          <div className='mt-4'>\r\n            {Object.keys(question).length > 0 &&\r\n              question.option_array.length > 0 &&\r\n              question.question_type === 'single' &&\r\n              question.option_array.map((elem) => {\r\n                return (\r\n                  <div key={elem.order} className='QuestionTaker__questionOptions m-2'>\r\n                    <label\r\n                      className={`QuestionTaker__customRadio p-2 w-100 ${\r\n                        elem.isFocus ? 'QuestionTaker__focusedRadio' : 'w-75'\r\n                      }`}\r\n                      htmlFor={`testRadio${elem.order}`}\r\n                    >\r\n                      <input\r\n                        type='radio'\r\n                        name='testRadio'\r\n                        value={elem.order}\r\n                        onChange={(e) => this.selectedAnswer(e.target.value)}\r\n                        id={`testRadio${elem.order}`}\r\n                      />\r\n                      <div className='radioControl'>\r\n                        <MathJax math={String.raw`${elem.option_text_array[0]}`} />\r\n                      </div>\r\n                    </label>\r\n                    {elem.image && <img src={elem.image} alt='option' className='img-fluid m-2' />}\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n            {Object.keys(question).length > 0 && question.question_type === 'subjective' && (\r\n              <div className='m-3'>\r\n                <label className='has-float-label my-auto'>\r\n                  <input\r\n                    className='form-control'\r\n                    name='Answer'\r\n                    type='text'\r\n                    placeholder='Answer'\r\n                    value={answer}\r\n                    onChange={(e) => this.setState({ answer: e.target.value })}\r\n                  />\r\n                  <span>Answer</span>\r\n                </label>\r\n              </div>\r\n            )}\r\n\r\n            {Object.keys(question).length > 0 &&\r\n              question.option_array.length > 0 &&\r\n              question.question_type === 'multiple' &&\r\n              question.option_array.map((elem) => {\r\n                return (\r\n                  <div key={elem.order} className='QuestionTaker__questionOptions m-2'>\r\n                    <label\r\n                      htmlFor={elem.order}\r\n                      className={`QuestionTaker__customRadio p-2 w-100 ${\r\n                        checked[elem.order - 1] ? 'QuestionTaker__focusedRadio' : 'w-75'\r\n                      }`}\r\n                    >\r\n                      <div className='radioControl'>\r\n                        <MathJax math={String.raw`${elem.option_text_array[0]}`} />\r\n                      </div>\r\n                      <input\r\n                        onChange={() => this.handleChecked(elem.order)}\r\n                        id={elem.order}\r\n                        type='checkbox'\r\n                        checked={checked[elem.order - 1]}\r\n                      />\r\n                      {elem.image && <img src={elem.image} alt='option' className='img-fluid' />}\r\n                    </label>\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </Card>\r\n        <Row className='mx-2 mt-5 mb-3 justify-content-center'>\r\n          {['Clear Response', 'Save And Next', 'Mark For Review'].map((e) => {\r\n            return (\r\n              <Button variant='customTestSubmit' onClick={() => this.submitAnswer(e)} key={e}>\r\n                {e}\r\n              </Button>\r\n            );\r\n          })}\r\n        </Row>\r\n        {/* <pre>{timer}</pre> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionCard;\r\n\r\nQuestionCard.propTypes = {\r\n  currentQuestion: PropTypes.instanceOf(Object).isRequired,\r\n  onUnmount: PropTypes.func.isRequired,\r\n  onSaveAndNext: PropTypes.func.isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\Pallette.js",["402","403"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport Collapse from 'react-bootstrap/Collapse';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst Pallette = (props) => {\r\n  const { questions, changeQuestion, currentQuestion, startingResult } = props;\r\n  const [currentQuestionId, setCurrentQuestionId] = useState(55);\r\n  const [totalQuestions, setTotalQuestions] = useState([]);\r\n  const [subject, setSubject] = useState('');\r\n  const [expand, setExpand] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (questions) {\r\n      //  setSubject(questions[0].subject);\r\n      //  setTotalQuestions(questions[0].question_list);\r\n      //   setCurrentQuestion(currentQuestion);\r\n      setCurrentQuestionId(currentQuestion.uuid);\r\n    }\r\n\r\n    // console.log(questions, currentQuestionId.uuid, 'pallle');\r\n  }, [questions]);\r\n\r\n  useEffect(() => {\r\n    if (startingResult) {\r\n      setSubject(questions[0].subject);\r\n      setTotalQuestions(questions[0].question_list);\r\n      setCurrentQuestionId(1);\r\n    }\r\n  }, [startingResult]);\r\n\r\n  const selectSubject = (elem) => {\r\n    setSubject(elem.subject);\r\n    setTotalQuestions(elem.question_list);\r\n    changeQuestion(elem.subject, 1);\r\n    setCurrentQuestionId(1);\r\n  };\r\n\r\n  const handleChangeQuestion = (id) => {\r\n    setCurrentQuestionId(id);\r\n    changeQuestion(subject, id);\r\n  };\r\n\r\n  return (\r\n    <div className='mt-3 mx-2'>\r\n      <Card style={{ boxShadow: '0px 1px 3px 0px rgba(0,0,0,0.16)', borderRadius: '10px' }}>\r\n        <Row className='mx-2 my-3'>\r\n          <Col xs={10}>\r\n            <Row>\r\n              <span className='QuestionTaker__smallQuestion my-auto'>Question</span>\r\n              <span className='QuestionTaker__currentQuestion ml-2'>{currentQuestionId}</span>\r\n              <span className='QuestionTaker__totalQuestions ml-1'>/{totalQuestions.length}</span>\r\n              <span className='ml-auto QuestionTaker__currentSubject'>{subject}</span>\r\n            </Row>\r\n            <Row>\r\n              <ProgressBar\r\n                now={(currentQuestionId / totalQuestions.length) * 100}\r\n                variant='testProgress'\r\n                bsPrefix='testerProgressBar'\r\n              />\r\n            </Row>\r\n          </Col>\r\n          <Col xs={2}>\r\n            {expand ? (\r\n              <span\r\n                onClick={() => setExpand(!expand)}\r\n                role='button'\r\n                tabIndex='-1'\r\n                onKeyDown={() => setExpand(!expand)}\r\n              >\r\n                <ExpandLessIcon className='m-auto' />\r\n              </span>\r\n            ) : (\r\n              <span\r\n                onClick={() => setExpand(!expand)}\r\n                role='button'\r\n                tabIndex='-1'\r\n                onKeyDown={() => setExpand(!expand)}\r\n              >\r\n                <ExpandMoreIcon className='m-auto' />\r\n              </span>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <Collapse in={expand}>\r\n          <div style={{ backgroundColor: 'rgba(241, 249, 255, 1)' }}>\r\n            <p className='QuestionTaker__smallQuestion m-2'>Sections</p>\r\n            <Row className='m-2'>\r\n              {questions\r\n                ? questions.map((elem) => {\r\n                    return (\r\n                      <Button\r\n                        variant='testBlueOnWhite'\r\n                        active={elem.subject === subject}\r\n                        key={elem.subject}\r\n                        onClick={() => selectSubject(elem)}\r\n                      >\r\n                        {elem.subject}\r\n                      </Button>\r\n                    );\r\n                  })\r\n                : ''}\r\n            </Row>\r\n            <p className='QuestionTaker__smallQuestion m-2'>Question Pallette</p>\r\n            <Row className='m-2'>\r\n              {totalQuestions.map((elem) => {\r\n                return (\r\n                  <Button\r\n                    variant='testPallette'\r\n                    className={\r\n                      elem.question_status === 'Attempted'\r\n                        ? 'btn-greenTest'\r\n                        : elem.question_status === 'Review'\r\n                        ? 'btn-purpleTest'\r\n                        : elem.question_status === 'Answered And review'\r\n                        ? 'btn-purpleGreenTest'\r\n                        : elem.question_status === 'Viewed'\r\n                        ? 'btn-redTest'\r\n                        : 'btn-unattempted'\r\n                    }\r\n                    onClick={() => handleChangeQuestion(elem.uuid)}\r\n                    key={elem.uuid}\r\n                  >\r\n                    {elem.question_status === 'Answered And review' && (\r\n                      <DoneIcon className='QuestionTaker__tick' id='testTick' />\r\n                    )}\r\n                    {elem.uuid}\r\n                  </Button>\r\n                );\r\n              })}\r\n            </Row>\r\n          </div>\r\n        </Collapse>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pallette;\r\n\r\nPallette.propTypes = {\r\n  questions: PropTypes.instanceOf(Array).isRequired,\r\n  changeQuestion: PropTypes.func.isRequired,\r\n  currentQuestion: PropTypes.instanceOf(Object).isRequired,\r\n  startingResult: PropTypes.bool.isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\QuestionTaker\\Timer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Fees\\FeesCard.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Preloader\\Preloader.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\PhoneNo\\PhoneNo.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\Welcome\\Welcome.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\userProfile.action.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\clientUserId.action.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\tests.action.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\homework.action.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Tests\\Tests.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\SelectQuestions.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\QuestionList.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\PreviewQuestions.js",["404"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { connect } from 'react-redux';\r\nimport Question from './Question';\r\nimport { homeworkActions } from '../../redux/actions/homework.action';\r\nimport { getSelectedQuestionArray } from '../../redux/reducers/homeworkCreator.reducer';\r\n\r\nconst PreviewQuestions = (props) => {\r\n  const {\r\n    selectedQuestionArray,\r\n    setCurrentSlide,\r\n    setSelectedQuestionArrayToStore,\r\n    history,\r\n  } = props;\r\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setSelectedQuestions(selectedQuestionArray);\r\n  }, [selectedQuestionArray]);\r\n\r\n  const updateSelectedQuestions = (question) => {\r\n    const updatedSelectedQuestions = selectedQuestions.filter((e) => {\r\n      return e.question_id !== question.question_id;\r\n    });\r\n\r\n    setSelectedQuestions(updatedSelectedQuestions);\r\n    setSelectedQuestionArrayToStore(updatedSelectedQuestions);\r\n  };\r\n\r\n  const goToPreview = () => {\r\n    history.push('/homework/preview');\r\n  };\r\n\r\n  return (\r\n    <Card className='Homework__selectCard mb-3 mx-2'>\r\n      <div className='d-flex mt-3 mx-2'>\r\n        <span className='text-left Homework__questionIndex my-auto'>\r\n          {selectedQuestions.length} selected\r\n        </span>\r\n        <div className='ml-auto my-auto'>\r\n          <Button variant='customPrimarySmol' onClick={() => goToPreview()}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      {selectedQuestions.map((e, index) => {\r\n        return (\r\n          <Question\r\n            question={e}\r\n            index={index + 1}\r\n            update={updateSelectedQuestions}\r\n            key={e.question_id}\r\n          />\r\n        );\r\n      })}\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedQuestionArray: getSelectedQuestionArray(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setSelectedQuestionArrayToStore: (payload) => {\r\n      dispatch(homeworkActions.setSelectedQuestionArrayToStore(payload));\r\n    },\r\n    setCurrentSlide: (payload) => {\r\n      dispatch(homeworkActions.setCurrentSlide(payload));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PreviewQuestions);\r\n\r\nPreviewQuestions.propTypes = {\r\n  setCurrentSlide: PropTypes.func.isRequired,\r\n  setSelectedQuestionArrayToStore: PropTypes.func.isRequired,\r\n  selectedQuestionArray: PropTypes.instanceOf(Array).isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n","D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\AddYoutube\\AddYoutube.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\FileViewer\\FileViewer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\VideoPlayer\\VideoPlayer.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\BatchesSelector\\BatchesSelector.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\color.actions.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\redux\\actions\\branding.action.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Tests\\LiveTestCounter.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\HomeWorkCreator\\Question.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\PageHeader\\PageHeader.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DashboardCards\\DashboardCards.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\ScrollableCards\\ScrollableCards.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\DynamicForm.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\BackButton\\BackButton.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\OTPInput\\OTPInput.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\ChatDots\\ChatDots.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\FormTemplate.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\DynamicForm\\Validation.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Common\\AddButton\\AddButton.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\Enquiry\\Enquiry.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\Enquiry\\EnquiryDetails\\EnquiryDetails.js",[],"D:\\React\\Ingenium-react\\Ingeniumwebportal\\src\\Components\\Login\\AdmissionChat\\EnquiryTemplate\\EnquiryTemplate.js",["405"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { ChatDots } from '../../../Common';\r\nimport { useTimeout, EmailRegExp, onlyAlphaRegExp } from '../../../../Utilities';\r\nimport avatarImage from '../../../../assets/images/avatarImage.jpg';\r\nimport './EnquiryTemplate.scss';\r\nimport check from '../../../../assets/images/checkMark.svg';\r\n\r\nconst EnquiryTemplate = (props) => {\r\n  const { text, getData, type, details, id } = props;\r\n\r\n  const [waitingDots, setWaitingDotsTime] = useState(true);\r\n  const [isValid, setValid] = useState(false);\r\n  const [inputData, setData] = useState('');\r\n  const [showValue, setValue] = useState(false);\r\n  const inputEl = useRef(null);\r\n\r\n  useTimeout(() => setWaitingDotsTime(false), 1000);\r\n\r\n  useEffect(() => {\r\n    if (!waitingDots && !showValue) {\r\n      inputEl.current.scrollIntoView();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (text.question_type === 'objective') {\r\n      text.merged = [];\r\n      for (let i = 0; i < text.english_options.length; i++) {\r\n        text.merged[i] = text.hindi_options[i]\r\n          ? `${text.english_options[i].option_text}/${text.hindi_options[i].option_text}`\r\n          : text.english_options[i].option_text;\r\n      }\r\n    }\r\n\r\n    if (text.response) {\r\n      setData(text.response);\r\n      setValue(true);\r\n      getData(inputData, id);\r\n    }\r\n  }, [\r\n    getData,\r\n    inputData,\r\n    text.english_options,\r\n    text.hindi_options,\r\n    text.merged,\r\n    text.question_type,\r\n    text.response,\r\n    type,\r\n    id,\r\n  ]);\r\n\r\n  const submitData = () => {\r\n    if (type === 'email') {\r\n      if (inputData.match(EmailRegExp)) {\r\n        setValid(false);\r\n        getData(inputData, id);\r\n        setValue(true);\r\n      } else {\r\n        setValid(true);\r\n      }\r\n    } else if (inputData) {\r\n      setValid(false);\r\n      getData(inputData, id);\r\n      setValue(true);\r\n    } else {\r\n      setValid(true);\r\n    }\r\n  };\r\n\r\n  const setFormData = (e) => {\r\n    if ((type === 'name' && e === '') || onlyAlphaRegExp.test(e)) {\r\n      setData(e);\r\n    } else {\r\n      setData(e);\r\n    }\r\n  };\r\n\r\n  const submitOption = (e) => {\r\n    getData(e, id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row className='mb-3 ml-1 Enquiry__blurb'>\r\n        {waitingDots && (\r\n          <>\r\n            <img\r\n              src={avatarImage}\r\n              width='24'\r\n              height='24'\r\n              alt='avatar'\r\n              className='rounded-circle m-1'\r\n            />\r\n            <ChatDots />\r\n          </>\r\n        )}\r\n      </Row>\r\n      {!waitingDots && (\r\n        <>\r\n          <Row className='mb-5 ml-1 Enquiry__blurb'>\r\n            <img\r\n              src={avatarImage}\r\n              width='24'\r\n              height='24'\r\n              alt='avatar'\r\n              className='rounded-circle m-1'\r\n            />\r\n            <div className='ml-2 Enquiry__chatBox w-75 p-3'>\r\n              {details.name && type !== 'name' && <p>Hi {details.name}!</p>}\r\n              <p>{text.english_text}</p>\r\n\r\n              <p className='Enquiry__hinText'>\r\n                <span>{text.hindi_text}</span>\r\n              </p>\r\n            </div>\r\n          </Row>\r\n\r\n          {!showValue && text.question_type === 'subjective' && (\r\n            <Row className='text-center EnquiryTemplate__inputRow'>\r\n              <Col xs={10} className='EnquiryTemplate__input pr-0'>\r\n                <input\r\n                  ref={inputEl}\r\n                  name={type}\r\n                  type='text'\r\n                  placeholder={type}\r\n                  onChange={(event) => setFormData(event.target.value)}\r\n                  value={inputData}\r\n                />\r\n              </Col>\r\n              <Col xs={2} className='p-0'>\r\n                <Button variant='enquiryTemplate' onClick={() => submitData()}>\r\n                  <img src={check} alt='check button' className='my-auto' />\r\n                </Button>\r\n              </Col>\r\n\r\n              {isValid && (\r\n                <small className='text-danger d-block text-center'>\r\n                  Please enter a valid {type}\r\n                </small>\r\n              )}\r\n            </Row>\r\n          )}\r\n\r\n          {!showValue && text.question_type === 'objective' && (\r\n            <Row className='Enquiry__rightBlurb mb-3'>\r\n              <div className='ml-auto mr-3 '>\r\n                <Col className='Enquiry__formContainer p-0'>\r\n                  <p className='text-center Enquiry__formHeading pt-3 pb-2 px-2 m-0'>\r\n                    Select Your Reply\r\n                  </p>\r\n                  <Form className='Enquiry__form my-3 mx-2 '>\r\n                    <div className='mb-3'>\r\n                      {text.merged.map((elem) => {\r\n                        return (\r\n                          <Form.Check\r\n                            type='radio'\r\n                            id={elem}\r\n                            label={elem}\r\n                            value={elem}\r\n                            name='ojective options'\r\n                            onChange={(e) => submitOption(e.target.value)}\r\n                            ref={inputEl}\r\n                            key={elem}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </Form>\r\n                </Col>\r\n              </div>\r\n            </Row>\r\n          )}\r\n\r\n          {showValue && (\r\n            <Row className='Enquiry__rightBlurb mb-3'>\r\n              <div className='ml-auto mr-3 '>\r\n                <Col className='p-0'>\r\n                  <p className='text-center Enquiry__rightInfo p-3 m-0 rounded'>{inputData}</p>\r\n                </Col>\r\n              </div>\r\n            </Row>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnquiryTemplate;\r\n\r\nEnquiryTemplate.propTypes = {\r\n  text: PropTypes.shape({\r\n    question_type: PropTypes.string.isRequired,\r\n    merged: PropTypes.instanceOf(Array),\r\n    english_options: PropTypes.instanceOf(Array),\r\n    hindi_options: PropTypes.instanceOf(Array),\r\n    response: PropTypes.string,\r\n    english_text: PropTypes.string,\r\n    hindi_text: PropTypes.string,\r\n  }),\r\n\r\n  getData: PropTypes.func.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  details: PropTypes.instanceOf(Object),\r\n  id: PropTypes.number.isRequired,\r\n};\r\n\r\nEnquiryTemplate.defaultProps = {\r\n  text: {\r\n    merged: undefined,\r\n    english_options: [],\r\n    hindi_options: [],\r\n    english_text: '',\r\n    hindi_text: '',\r\n    response: null,\r\n  },\r\n  details: {},\r\n};\r\n",{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","replacedBy":"409"},{"ruleId":"410","replacedBy":"411"},{"ruleId":"412","replacedBy":"413"},{"ruleId":"414","replacedBy":"415"},{"ruleId":"416","replacedBy":"417"},{"ruleId":"418","replacedBy":"419"},{"ruleId":"420","replacedBy":"421"},{"ruleId":"422","severity":1,"message":"423","line":31,"column":5,"nodeType":"424","messageId":"425","endLine":31,"endColumn":58},{"ruleId":"422","severity":1,"message":"423","line":97,"column":5,"nodeType":"424","messageId":"425","endLine":97,"endColumn":100},{"ruleId":"426","severity":1,"message":"427","line":55,"column":7,"nodeType":"428","endLine":55,"endColumn":20},{"ruleId":"422","severity":1,"message":"423","line":229,"column":7,"nodeType":"424","messageId":"425","endLine":229,"endColumn":51},{"ruleId":"422","severity":1,"message":"423","line":57,"column":11,"nodeType":"424","messageId":"425","endLine":57,"endColumn":57},{"ruleId":"422","severity":1,"message":"423","line":60,"column":11,"nodeType":"424","messageId":"425","endLine":60,"endColumn":79},{"ruleId":"422","severity":1,"message":"423","line":131,"column":11,"nodeType":"424","messageId":"425","endLine":131,"endColumn":57},{"ruleId":"422","severity":1,"message":"423","line":30,"column":11,"nodeType":"424","messageId":"425","endLine":30,"endColumn":32},{"ruleId":"422","severity":1,"message":"423","line":32,"column":11,"nodeType":"424","messageId":"425","endLine":32,"endColumn":31},{"ruleId":"422","severity":1,"message":"423","line":30,"column":11,"nodeType":"424","messageId":"425","endLine":30,"endColumn":32},{"ruleId":"422","severity":1,"message":"423","line":45,"column":20,"nodeType":"424","messageId":"425","endLine":45,"endColumn":87},{"ruleId":"429","severity":1,"message":"430","line":8,"column":17,"nodeType":"431","messageId":"432","endLine":8,"endColumn":25},{"ruleId":"433","severity":1,"message":"434","line":10,"column":9,"nodeType":"435","endLine":32,"endColumn":4},{"ruleId":"433","severity":1,"message":"436","line":118,"column":6,"nodeType":"437","endLine":118,"endColumn":8,"suggestions":"438"},{"ruleId":"429","severity":1,"message":"439","line":13,"column":10,"nodeType":"431","messageId":"432","endLine":13,"endColumn":14},{"ruleId":"429","severity":1,"message":"440","line":14,"column":10,"nodeType":"431","messageId":"432","endLine":14,"endColumn":25},{"ruleId":"426","severity":1,"message":"427","line":38,"column":7,"nodeType":"428","endLine":38,"endColumn":20},{"ruleId":"433","severity":1,"message":"441","line":29,"column":6,"nodeType":"437","endLine":29,"endColumn":17,"suggestions":"442"},{"ruleId":"433","severity":1,"message":"443","line":37,"column":6,"nodeType":"437","endLine":37,"endColumn":22,"suggestions":"444"},{"ruleId":"429","severity":1,"message":"445","line":13,"column":5,"nodeType":"431","messageId":"432","endLine":13,"endColumn":20},{"ruleId":"433","severity":1,"message":"446","line":45,"column":6,"nodeType":"437","endLine":55,"endColumn":4,"suggestions":"447"},"no-native-reassign",["448"],"no-negated-in-lhs",["449"],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["450"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-alert","Unexpected alert.","CallExpression","unexpected","react/no-did-update-set-state","Do not use setState in componentDidUpdate","MemberExpression","no-unused-vars","'setSlide' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'toolBarOptions' array makes the dependencies of useCallback Hook (at line 111) change on every render. To fix this, wrap the initialization of 'toolBarOptions' in its own useMemo() Hook.","VariableDeclarator","React Hook useEffect has missing dependencies: 'initialiseJitsi', 'jitsi', 'role', and 'toolBarOptions'. Either include them or remove the dependency array.","ArrayExpression",["451"],"'type' is assigned a value but never used.","'selectedChapter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentQuestion.uuid'. Either include it or remove the dependency array.",["452"],"React Hook useEffect has a missing dependency: 'questions'. Either include it or remove the dependency array.",["453"],"'setCurrentSlide' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'text'. Either include it or remove the dependency array.",["454"],"no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},"Update the dependencies array to be: [initialiseJitsi, jitsi, role, toolBarOptions]",{"range":"463","text":"464"},"Update the dependencies array to be: [currentQuestion.uuid, questions]",{"range":"465","text":"466"},"Update the dependencies array to be: [questions, startingResult]",{"range":"467","text":"468"},"Update the dependencies array to be: [getData, inputData, text.english_options, text.hindi_options, text.merged, text.question_type, text.response, type, id, text]",{"range":"469","text":"470"},[3358,3360],"[initialiseJitsi, jitsi, role, toolBarOptions]",[1172,1183],"[currentQuestion.uuid, questions]",[1368,1384],"[questions, startingResult]",[1556,1727],"[getData, inputData, text.english_options, text.hindi_options, text.merged, text.question_type, text.response, type, id, text]"]